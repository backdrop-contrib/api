<?php

/**
 * Provides a base class for testing web pages (user/admin) for the API module.
 */
class ApiWebPagesBaseTest extends DrupalWebTestCase {
  protected $default_branch;
  protected $super_user;
  protected $branch_info;

  /**
   * Overrides DrupalWebTestCase::setUp().
   *
   * Sets up the sample branch, using the administrative interface, and updates
   * this and the default PHP branch.
   */
  public function setUp() {
    // Save the default branch for teardown.
    $this->default_branch = variable_get('api_default_branch', NULL);
    variable_del('api_default_branch');
    DrupalWebTestCase::setUp('job_queue', 'grammar_parser', 'api', 'ctools');

    // Set up a super-user.
    $this->super_user = $this->drupalCreateUser(array(
        'access API reference',
        'administer API reference',
        'access content',
        'access administration pages',
      ));
    $this->drupalLogin($this->super_user);

    // Create a "file" branch with the sample code, from the admin interface.
    $this->branch_info = array(
      'project' => 'test',
      'branch_name' => '6',
      'project_title' => 'Project 6',
      'title' => 'Testing 6',
      'status' => 1,
      'data[directories]' => drupal_get_path('module', 'api') .'/tests/sample',
    );

    $this->drupalPost('admin/settings/api/branches/new/files',
      $this->branch_info,
      t('Save branch')
    );

    // Find the ID that was assigned to this branch.
    $branches = api_get_branches(TRUE);
    $this_id = 0;
    foreach ($branches as $branch) {
      if ($branch->title == 'Testing 6') {
        $this_id = $branch->branch_id;
        break;
      }
    }

    // Make this the default branch.
    $this->drupalPost('admin/settings/api/branches/list',
      array(
        'default_branch' => $this_id,
      ),
      t('Save changes')
    );

    // Parse the code.
    include_once drupal_get_path('module', 'api') .'/parser.inc';
    api_update_all_branches();
    while (job_queue_dequeue()) { }
    api_shutdown();

    api_get_branches(TRUE);
  }

  /**
   * Overrides DrupalWebTestCase::tearDown().
   *
   * Ensures that the default branch doesn't get overridden by tests.
   */
  public function tearDown() {
    DrupalWebTestCase::tearDown();
    // Aparently SimpleTest is leaky sometimes.
    variable_set('api_default_branch', $this->default_branch);
  }
}

/**
 * Tests the API module listing pages (functions, classes, etc.).
 */
class ApiListingPagesTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => t('Listing pages'),
      'description' => t('Tests listing pages for the API module.'),
      'group' => 'API Module',
    );
  }

  /**
   * Tests that listing pages have the right information.
   */
  function testListingPages() {
    // Test the Functions page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/functions');
    $this->assertLink('duplicate_function', 0, 'duplicate_function is on functions list page');
    $this->assertLink('sample_function', 0, 'sample_function is on functions list page');
    $this->assertLink('sample_class_function', 0, 'sample_class_function is on functions list page');
    $this->assertText('For testing duplicate', 'duplicate_function description is on functions list page');
    $this->assertText('A sample function', 'sample_function description is on functions list page');
    $this->assertLink('sample.php', 0, 'sample.php file name is on functions list page');
    $this->assertLink('duplicates.php', 0,  'duplicates.php file name is on functions list page');
    $this->assertLink('sample_insubdir_function', 0,  'subdir function is on functions list page');
    $this->assertLink('sample-subdir.php', 0,  'sample-subdir.php file name is on functions list page');

    // Verify file/function links.
    $this->clickLink('sample_function');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/function/sample_function') !== FALSE, 'sample_function link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/functions');
    $this->clickLink('sample.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php') !== FALSE, 'sample.php link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/functions');
    $this->clickLink('sample_insubdir_function');
    $this->assertText('Used for sample and testing URLs', 'Subdir link went to right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/functions');
    $this->clickLink('sample-subdir.php');
    $this->assertText('A sample global in a subdirectory', 'Sample file link went to right place');
    $this->assertText('A sample file in a subdirectory', 'Sample file link went to right place');

    // Test the Constants page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/constants');
    $this->assertLink('DUPLICATE_CONSTANT', 0, 'DUPLICATE_CONSTANT is on constants list page');
    $this->assertLink('SAMPLE_CONSTANT', 0, 'SAMPLE_CONSTANT is on constants list page');
    $this->assertText('For testing duplicate constant linking', 'DUPLICATE_CONSTANT description is on constants list page');
    $this->assertText('A sample constant', 'SAMPLE_CONSTANT description is on constants list page');
    $this->assertLink('sample.php', 0, 'sample.php file name is on constants list page');
    $this->assertLink('duplicates.php', 0, 'duplicates.php file name is on constants list page');
    $this->assertLink('SAMPLE_CONSTANT_IN_SUB_DIR', 0,  'subdir constant is on constants list page');
    $this->assertLink('sample-subdir.php', 0,  'sample-subdir.php file name is on constants list page');

    // Verify constant/function links.
    $this->clickLink('SAMPLE_CONSTANT');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/constant/SAMPLE_CONSTANT') !== FALSE, 'SAMPLE_CONSTANT link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/constants');
    $this->clickLink('sample.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php') !== FALSE, 'sample.php link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/constants');
    $this->clickLink('SAMPLE_CONSTANT_IN_SUB_DIR');
    $this->assertText('A sample constant', 'Constant link went to right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/constants');
    $this->clickLink('sample-subdir.php');
    $this->assertText('A sample global in a subdirectory', 'Sample file link went to right place');
    $this->assertText('A sample file in a subdirectory', 'Sample file link went to right place');

    // Test the Classes page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes');
    $this->assertLink('Sample', 0, 'Sample is on classes list page');
    $this->assertLink('Sample2', 0, 'Sample2 is on classes list page');
    $this->assertLink('SubSample', 0, 'SubSample is on classes list page');
    $this->assertLink('SampleInterface', 0, 'SampleInterface is on classes list page');
    $this->assertLink('SampleInterfaceTwo', 0, 'SampleInterfaceTwo is on classes list page');
    $this->assertLink('SampleInSubDir', 0, 'Subdir sample is on classes list page');
    $this->assertText('Sample class.', 'Sample class description is on classes list page');
    $this->assertText('Sample interface.', 'Sample interface description is on classes list page');
    $this->assertLink('classes.php', 0, 'classes.php file name is on classes list page');
    $this->assertLink('classes-subdir.php', 0, 'classes-subdir.php file name is on classes list page');
    $this->assertNoText('baz', 'Member name is not on classes page');

    // Verify file/class links.
    $this->clickLink('Sample');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/class/Sample') !== FALSE, 'Sample link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes');
    $this->clickLink('classes.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php') !== FALSE, 'classes.php link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes');
    $this->clickLink('SampleInterface');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/interface/SampleInterface') !== FALSE, 'SampleInterface link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes');
    $this->clickLink('Sample2InSubDir');
    $this->assertText('implements foo2', 'Sample2 link went to right place');
    $this->assertText('Sample2InSubDir implements', 'Sample2 link went to right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes');
    $this->clickLink('classes-subdir.php');
    $this->assertText('Classes in a subdirectory test', 'Classes file link went to right place');
    $this->assertText('Another Sample interface in a subdirectory', 'Classes file link went to right place');

    // Test the Files page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/files');
    $this->assertLink('sample.php', 0, 'sample.php file name is on files list page');
    $this->assertLink('classes.php', 0, 'classes.php file name is on files list page');
    $this->assertLink('duplicates.php', 0, 'duplicates.php file name is on files list page');
    $this->assertLink('sample--doubledash.tpl.php', 0, 'double-dash file name is on files list page');
    $this->assertLink('classes-subdir.php', 0, 'sub-directory file name is on files list page');
    $this->assertText('A sample file', 'sample.php file description is on files list page');
    $this->assertText('Object-oriented tests', 'classes.php file description is on files list page');

    // Verify file links.
    $this->clickLink('classes.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php') !== FALSE, 'classes.php link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/files');
    $this->clickLink('sample--doubledash.tpl.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample--doubledash.tpl.php') !== FALSE, 'double-dash link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/files');
    $this->clickLink('classes-subdir.php');
    $this->assertText('Classes in a subdirectory test', 'Classes file link went to right place');
    $this->assertText('Another Sample interface in a subdirectory', 'Classes file link went to right place');

    // Test the Globals page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/globals');
    $this->assertLink('$sample_global', 0, '$sample_global is on the globals list page');
    $this->assertLink('$sample_in_sub_dir_global', 0, '$sample_in_sub_dir_global is on the globals list page');
    $this->assertText('A sample global.', '$sample_global description is on the globals list page');
    $this->assertLink('sample.php', 0, 'sample.php file name is on globals list page');
    $this->assertLink('sample-subdir.php', 0, 'sample-subdir.php file name is on globals list page');

    // Verify global/file links.
    $this->clickLink('$sample_global');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/global/sample_global') !== FALSE, 'sample_global link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/globals');
    $this->clickLink('sample.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php') !== FALSE, 'samples.php link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/globals');
    $this->clickLink('$sample_in_sub_dir_global');
    $this->assertText('A sample global in a subdirectory', 'Global link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/globals');
    $this->clickLink('sample-subdir.php');
    $this->assertText('A sample global in a subdirectory', 'Sample file link went to right place');
    $this->assertText('A sample file in a subdirectory', 'Sample file link went to right place');

    // Test the Topics page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/groups');
    $this->assertLink('Class Samples', 0, 'Class Samples topic is on the topics page');
    $this->assertText('A sample group of classes. Should not include members', 'Class Samples description is on the topics page');
    $this->assertLink('Samples', 0, 'Samples topic is on the topics page');
    $this->assertText('A sample group', 'Samples description is on the topics page');

    // Verify topic link.
    $this->clickLink('Samples');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/group/samples') !== FALSE, 'Samples link went to the right place');
  }

}

/**
 * Tests the API module simple individual item pages (function, constant, etc.).
 */
class ApiSimpleItemPagesTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => t('Simple item pages'),
      'description' => t('Tests simple item pages (function, constant, etc.) for the API module.'),
      'group' => 'API Module',
    );
  }

  /**
   * Tests that constant pages have the right information.
   */
  function testConstantPage() {
    // Visit a constant page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/constant/DUPLICATE_CONSTANT');

    // Check the text on the page.
    $this->assertTrue(strpos($this->xpath('//title'), 'DUPLICATE_CONSTANT') !== FALSE, 'Constant page title includes constant name');
    $this->assertText('For testing duplicate constant linking.', 'Description is present on constant page');
    $this->assertText("define('DUPLICATE_CONSTANT'", 'Code is present on constant page');
    $this->assertLink('sample.php', 0, 'Link to file is present on constant page');
    $this->assertLink($this->branch_info['branch_name'] . ' duplicates.php', 0, 'Link to other version is present on constant page');
    $this->assertText($this->branch_info['project_title'], 'Project title is on constant page');

    // Click the links on the page and verify.
    $this->clickLink($this->branch_info['branch_name'] . ' duplicates.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/duplicates.php/constant/DUPLICATE_CONSTANT') !== FALSE, 'Other version link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/constant/DUPLICATE_CONSTANT');
    $this->clickLink('sample.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php') !== FALSE, 'File link went to the right place');

    // Visit a constant in a subdirectory and verify.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/subdirectory!sample-subdir.php/constant/SAMPLE_CONSTANT_IN_SUB_DIR');
    $this->assertText('A sample constant', 'Constant description appears on subdirectory constant page');
    $this->assertText('SAMPLE_CONSTANT_IN_SUB_DIR', 'Constant name appears on subdirectory constant page');
    $this->assertText('subdirectory/', 'Subdirectory name appears on subdirectory constant page');
    $this->assertLink('sample-subdir.php', 0, 'sample-subdir.php file name is on subdirectory constant page');
    $this->clickLink('sample-subdir.php');
    $this->assertText('A sample global in a subdirectory', 'Sample file link went to right place');
    $this->assertText('A sample file in a subdirectory', 'Sample file link went to right place');
  }

  /**
   * Tests that function pages have the right information.
   */
  function testFunctionPage() {
    // Visit a function page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/duplicate_function');

    // Check the text on the page.
    $this->assertTrue(strpos($this->xpath('//title'), 'duplicate_function') !== FALSE, 'Function page title includes function name');
    $this->assertText('For testing duplicate function name linking.', 'Description is present on function page');
    $this->assertText("function duplicate_function() {", 'Code is present on function page');
    $this->assertLink('sample.php', 0, 'Link to file is present on function page');
    $this->assertLink($this->branch_info['branch_name'] . ' duplicates.php', 0, 'Link to other version is present on function page');
    $this->assertLink('duplicate_function()', 0, 'Second link to other version is present on function page');
    $this->assertText('1 function calls duplicate_function()', 'List of calling functions is present');
    $this->assertLink('sample_in_code_links', 0, 'Calling function link is present');
    $this->assertText('Does something interesting, to test', 'Calling function description is present');

    // Test the links made with @link on this function.
    $this->assertLink('Subscribers', 0, 'Link to Subscribers is on function page');
    $this->clickLink('Subscribers');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/group/samples') !== FALSE, 'Subscribers link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/duplicate_function');
    $this->assertLink('newsletter issues', 0, 'Link to newsletter issues is on function page');
    $this->clickLink('newsletter issues');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/group/class_samples') !== FALSE, 'Newsletter link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/duplicate_function');

    // Click the automatically-generated links on the page and verify.
    $this->clickLink($this->branch_info['branch_name'] . ' duplicates.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/duplicates.php/function/duplicate_function') !== FALSE, 'Other version link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/duplicate_function');
    $this->clickLink('sample.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php') !== FALSE, 'File link went to the right place');

    // Try the other duplicate_function() page, and verify the calling
    // functions are there too.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/duplicates.php/function/duplicate_function');
    $this->assertText('1 function calls duplicate_function()', 'List of calling functions is present');
    $this->assertLink('sample_in_code_links', 0, 'Calling function link is present');
    $this->assertText('Does something interesting, to test', 'Calling function description is present');

    // Now try the function page with more complicated documentation.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_function');

    // Note that the unit tests verify a lot of other stuff, such as the
    // presence of text when loading a function, so we'll just look for some of
    // the text on the page.
    $this->assertText('Use for sample-related purposes', 'Extended description appears on the function page');
    $this->assertText('A generic parameter', 'Parameter description appears on teh function page');
    $this->assertText('Something about the return value', 'Return value description appears on the function page');
    $this->assertLink('this is a link for the parameter', 0, 'Link appears on the function page');
    $this->assertLink('duplicate_function', 0, 'See also link appears on the function page');
    $this->assertLink('Samples', 0, 'Topic link appears on the function page');
    $this->assertText('A sample group.', 'Topic description appears on the function page');

    // Verify list and parameter formatting -- again the unit tests take care of
    // some of this.
    $strong_lists = $this->xpath('//li/strong');
    $this->assertTrue(in_array('key1', $strong_lists), 'key1 is highlighted in a list on function page');
    $strong_pars = $this->xpath('//p/strong');
    $this->assertTrue(in_array('$parameter', $strong_pars), 'parameter is highlighted on function page');

    // Now try the function page with class parameters -- test the links.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_class_function');
    $this->assertLink('SubSample', 0, 'Parameter type is linked');
    $this->assertLink('SampleInterface', 0, 'Return value type is linked');
    $this->clickLink('SubSample');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/class/SubSample') !== FALSE, 'Class parameter link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_class_function');
    $this->clickLink('SampleInterface');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/interface/SampleInterface') !== FALSE, 'Interface return link went to the right place');

    // Visit a function in a subdirectory and verify.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/subdirectory!sample-subdir.php/function/sample_insubdir_function');
    $this->assertText('Another sample function; in a sub-directory.', 'Function description appears on subdirectory function page');
    $this->assertText('sample_insubdir_function', 'Function name appears on subdirectory function page');
    $this->assertText('subdirectory/', 'Subdirectory name appears on subdirectory function page');
    $this->assertLink('sample-subdir.php', 0, 'sample-subdir.php file name is on subdirectory function page');
    $this->clickLink('sample-subdir.php');
    $this->assertText('A sample global in a subdirectory', 'Sample file link went to right place');
    $this->assertText('A sample file in a subdirectory', 'Sample file link went to right place');
  }

  /**
   * Tests that global pages have the right information.
   */
  function testGlobalPage() {
    // Visit a global page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/global/sample_global');

    // Check the text on the page.
    $this->assertTrue(strpos($this->xpath('//title'), '$sample_global') !== FALSE, 'Global page title includes global name');
    $this->assertText('A sample global.', 'Description is present on global page');
    $this->assertLink('sample.php', 0, 'Link to file is present on global page');
    $this->assertText($this->branch_info['project_title'], 'Project title is on global page');
    $this->assertLink('Samples', 0, 'Topic link appears on the global page');
    $this->assertText('A sample group.', 'Topic description appears on the global page');

    // Click the links on the page and verify.
    $this->clickLink('sample.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php') !== FALSE, 'File link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/global/sample_global');
    $this->clickLink('Samples');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/group/samples') !== FALSE, 'Topic link went to the right place');

    // Visit a global in a subdirectory and verify.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/subdirectory!sample-subdir.php/global/sample_in_sub_dir_global');
    $this->assertText('A sample global in a subdirectory', 'Global description appears on subdirectory global page');
    $this->assertText('$sample_in_sub_dir_global', 'Global name appears on subdirectory global page');
    $this->assertText('subdirectory/', 'Subdirectory name appears on subdirectory global page');
    $this->assertLink('sample-subdir.php', 0, 'sample-subdir.php file name is on subdirectory global page');
    $this->clickLink('sample-subdir.php');
    $this->assertText('A sample global in a subdirectory', 'Sample file link went to right place');
    $this->assertText('A sample file in a subdirectory', 'Sample file link went to right place');
  }
}

/**
 * Tests the API module complex individual item pages (class, topic, etc.).
 */
class ApiComplexItemPagesTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => t('Complex item pages'),
      'description' => t('Tests complex item pages (class, topic, file) for the API module.'),
      'group' => 'API Module',
    );
  }

  /**
   * Tests that class pages have the right information.
   */
  function testClassPage() {
    // Visit a class page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');

    // Check the text on the page.
    $this->assertTrue(strpos($this->xpath('//title'), 'Sample') !== FALSE, 'Class page title includes class name');
    $this->assertText('Sample class.', 'Description is present on class page');
    $this->assertLink('classes.php', 0, 'Link to file is present on class page');
    $this->assertText($this->branch_info['project_title'], 'Project title is on class page');
    $this->assertLink('Class Samples', 0, 'Topic link appears on the class page');
    $this->assertText('A sample group of classes.', 'Topic description appears on the class page');
    $this->assertLink('SampleInterface', 0, 'Link to interface appears on class page');
    $this->assertLink('SubSample', 0, 'Link to subclass appears on class page');
    $this->assertLink('Sample::$property', 0, 'Link to property appears on class page');
    $this->assertText('A property.', 'Property description appears on class page');
    $this->assertLink('Sample::baz', 0, 'Link to method appears on class page');
    $this->assertText('Only implemented in children.', 'Method description appears on class page');
    $this->assertLink('Sample::foo', 0, 'Link to second method appears on class page');
    $this->assertText('Metasyntatic member function.', 'Second method description appears on class page');
    $this->assertLink('Sample::constant', 0, 'Link to constant appears on class page');
    $this->assertText('A class constant.', 'Constant description appears on class page');
    $this->assertText('* Only implemented in children.', 'Source code appears on class page');

    // Click the links on the page and verify.
    $this->clickLink('classes.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php') !== FALSE, 'File link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->clickLink('Class Samples');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/group/class_samples') !== FALSE, 'Topic link went to the right place');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->clickLink('SampleInterface');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/interface/SampleInterface') !== FALSE, 'Interface link went to the right place');
    // While we're here, check some text...
    $this->assertLink('Sample', 0, 'Link to sample class appears on interface page');
    $this->assertLink('Sample2', 0, 'Link to sample2 class appears on interface page');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->clickLink('Sample::$property');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/property/Sample') !== FALSE, 'Property link went to the right place');
    // While here, check text...
    $this->assertTrue(strpos($this->xpath('//title'), 'Sample::$property') !== FALSE, 'Property page title includes property name');
    $this->assertLink('SampleInterface', 0, 'Link to type appears on property page');
    $this->assertText('A property', 'Description appears on property page');
    $this->assertText('variable value', 'Code appears on property page');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->clickLink('Sample::baz');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/function/Sample') !== FALSE, 'Method link went to the right place');
    // While here, check text...
    $this->assertTrue(strpos($this->xpath('//title'), 'Sample::baz') !== FALSE, 'Method page title includes method name');
    $this->assertText('public function', 'Code appears on the method page');
    $this->assertText('Only implemented in children', 'Description appears on method page');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->clickLink('Sample::constant');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/constant/Sample') !== FALSE, 'Constant link went to the right place');
    // While here, check text...
    $this->assertTrue(strpos($this->xpath('//title'), 'Sample::constant') !== FALSE, 'Constant page title includes constant name');
    $this->assertText('constant value', 'Code appears on the constant page');
    $this->assertText('A class constant', 'Description appears on constant page');

    // Visit a class in a subdirectory and verify.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/subdirectory!classes-subdir.php/class/SampleInSubDir');
    $this->assertText('Sample class in a subdirectory.', 'Class description appears on subdirectory class page');
    $this->assertText('SampleInSubDir', 'Class name appears on subdirectory class page');
    $this->assertText('subdirectory/', 'Subdirectory name appears on subdirectory class page');
    $this->assertLink('classes-subdir.php', 0, 'classes-subdir.php file name is on subdirectory class page');
    $this->clickLink('classes-subdir.php');
    $this->assertText('Classes in a subdirectory test', 'Classes file link went to right place');
    $this->assertText('Another Sample interface in a subdirectory.', 'Classes file link went to right place');

  }

  /**
   * Tests that topic pages have the right information.
   */
  function testTopicPages() {
    // Test the Sample topic page.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/group/samples');
    $this->assertText('A sample group', 'Sample topic description appears on the page');
    $this->assertTrue(strpos($this->xpath('//title'), 'Samples') !== FALSE, 'Topic page title includes topic name');
    $this->assertLink('sample_function', 0, 'sample_function link is on sample topic page');
    $this->assertText('A sample function', 'sample_function description is on sample topic page');
    $this->assertLink('sample_class_function', 0, 'sample_class_function link is on sample topic page');
    $this->assertLink('sample.php', 0, 'sample.php file name is on sample topic page');
    $this->assertLink('SAMPLE_CONSTANT', 0, 'SAMPLE_CONSTANT link is on sample topic page');
    $this->assertText('A sample constant.', 'SAMPLE_CONSTANT description is on sample topic page.');
    $this->assertLink('$sample_global', 0, 'sample_global link is on sample topic page');
    $this->assertText('A sample global.', 'sample_global description is on sample topic page');

    // Verify links.
    $this->clickLink('sample_function');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/function/sample_function') !== FALSE, 'sample_function link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/group/samples');
    $this->clickLink('sample.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php') !== FALSE, 'sample.php link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/group/samples');
    $this->clickLink('SAMPLE_CONSTANT');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/constant/SAMPLE_CONSTANT') !== FALSE, 'SAMPLE_CONSTANT link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/group/samples');
    $this->clickLink('$sample_global');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/global/sample_global') !== FALSE, 'sample_global link went to the right place');

    // Now try the Sample Classes topic and make sure only classes and not
    // members appear there.

    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/group/class_samples');
    $this->assertText('A sample group of classes. Should not include members', 'Sample group topic description appears on the page');
    $this->assertTrue(strpos($this->xpath('//title'), 'Class Samples') !== FALSE, 'Topic page title includes topic name');
    $this->assertLink('Sample', 0, 'Sample class link is on topic page');
    $this->assertText('Sample class.', 'Sample class description is on topic page');
    $this->assertLink('Sample2', 0, 'Sample2 class link is on topic page');
    $this->assertLink('SubSample', 0, 'SubSample class link is on topic page');
    $this->assertLink('SampleInterface', 0, 'SampleInterface link is on topic page');
    $this->assertText('Sample interface.', 'SampleInterface description is on topic page');
    $this->assertLink('SampleInterfaceTwo', 0, 'SampleInterface2 link is on topic page');
    $this->assertLink('classes.php', 0, 'classes.php file name is on sample topic page');
    $this->assertNoText('baz', 'Member name is not on topic page');

    // Verify link destinations.
    $this->clickLink('Sample');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/class/Sample') !== FALSE, 'Sample link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/group/class_samples');
    $this->clickLink('SampleInterface');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/interface/SampleInterface') !== FALSE, 'Interface return link went to The Right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/group/class_samples');
    $this->clickLink('classes.php');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php') !== FALSE, 'classes.php link went to the right place');
  }

  /**
   * Tests that file pages have the right information.
   */
  function testFilePages() {
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/');
    $this->assertText('A sample file', 'Sample file description appears on the page');
    $this->assertTrue(strpos($this->xpath('//title'), 'sample.php') !== FALSE, 'File page title includes file name');
    $this->assertLink('sample_function', 0, 'sample_function link is on sample file page');
    $this->assertText('A sample function', 'sample_function description is on sample file page');
    $this->assertLink('sample_class_function', 0, 'sample_class_function link is on sample file page');
    $this->assertText('sample.php', 0, 'sample.php file name is on sample file page');
    $this->assertLink('SAMPLE_CONSTANT', 0, 'SAMPLE_CONSTANT link is on sample file page');
    $this->assertText('A sample constant.', 'SAMPLE_CONSTANT description is on sample file page.');
    $this->assertLink('$sample_global', 0, 'sample_global link is on sample file page');
    $this->assertText('A sample global.', 'sample_global description is on sample file page');
    $this->assertText('* Use for sample-related purposes.', 'source code is on sample file page');

    // Verify links.
    $this->clickLink('sample_function');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/function/sample_function') !== FALSE, 'sample_function link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php');
    $this->clickLink('SAMPLE_CONSTANT');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/constant/SAMPLE_CONSTANT') !== FALSE, 'SAMPLE_CONSTANT link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php');
    $this->clickLink('$sample_global');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/sample.php/global/sample_global') !== FALSE, 'sample_global link went to the right place');

    // Now try the classes file.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php');
    $this->assertText('Object-oriented tests', 'Sample file file description appears on the page');
    $this->assertTrue(strpos($this->xpath('//title'), 'classes.php') !== FALSE, 'File page title includes file name');
    $this->assertLink('Sample', 0, 'Sample class link is on file page');
    $this->assertText('Sample class.', 'Sample class description is on file page');
    $this->assertLink('Sample2', 0, 'Sample2 class link is on file page');
    $this->assertLink('SubSample', 0, 'SubSample class link is on file page');
    $this->assertLink('SampleInterface', 0, 'SampleInterface link is on file page');
    $this->assertText('Sample interface.', 'SampleInterface description is on file page');
    $this->assertLink('SampleInterfaceTwo', 0, 'SampleInterface2 link is on file page');
    $this->assertText('* Only implemented in children.', 'Source code appears on page');

    // Verify link destinations.
    $this->clickLink('Sample');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/class/Sample') !== FALSE, 'Sample link went to the right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php');
    $this->clickLink('SampleInterface');
    $this->assertTrue(strpos($this->url, $this->branch_info['project'] . '/classes.php/interface/SampleInterface') !== FALSE, 'Interface link went to the right place');

    // Now try a file in a subdirectory.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/subdirectory!sample-subdir.php');
    $this->assertText('A sample file in a subdirectory.', 'File description appears on subdirectory file page');
    $this->assertText('sample-subdir.', 'File name appears on subdirectory file page');
    $this->assertLink('sample_insubdir_function', 0, 'Function link appears on subdirectory file page');
    $this->clickLink('sample_insubdir_function');
    $this->assertText('Used for sample and testing URLs', 'Subdir link went to right place');

    // Now try a file with -- in the name.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample--doubledash.tpl.php');
    $this->assertText('Displays a sample with a doubledash.', 'File description appears on double-dash page');
  }

}

/**
 * Tests the API module admin pages.
 */
class ApiAdminPagesTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => t('Admin pages'),
      'description' => t('Tests admin pages for the API module.'),
      'group' => 'API Module',
    );
  }

  /**
   * Tests that admin pages work correctly.
   *
   * Note that some admin pages are tested during ApiWebPagesBaseTest::setUp().
   */
  function testAdminPages() {
    // Verify the branches overview page.
    $this->drupalGet('admin/settings/api/branches');

    $this->assertText($this->branch_info['project'], 'Test project identifier appears');
    $this->assertText($this->branch_info['title'], 'Test branch title appears');
    $this->assertText('php', 'PHP project name appears');
    $this->assertText('PHP functions', 'PHP branch title appears');

    $this->assertLink('edit', 0, 'Edit link appears');
    $this->clickLink('edit');
    $this->assertTrue(strpos($this->url, 'admin/settings/api/branches/2') !== FALSE, 'Edit link went to the right place');
    $this->assertRaw($this->branch_info['project'], 'Project name appears on edit page');
    $this->assertRaw($this->branch_info['branch_name'], 'Branch name appears on edit page');
    $this->assertRaw($this->branch_info['project_title'], 'Project title appears on edit page');
    $this->assertRaw($this->branch_info['title'], 'Branch title appears on edit page');
    $this->assertRaw($this->branch_info['data[directories]'], 'Data directory appears on edit page');

    $tmp_branch_info = array(
      'project' => 'temp',
      'branch_name' => 'foo',
      'project_title' => 'Project 6 bar',
      'title' => 'Testing 6 baz',
    );

    $this->drupalPost(NULL, $tmp_branch_info, t('Save branch'));

    // This should take us back to the admin listing. Verify the new info is
    // there.
    $this->assertText($tmp_branch_info['project'], 'Test project identifier appears');
    $this->assertText($tmp_branch_info['title'], 'Test branch title appears');

    // Now edit again, verify saved info is there, and set back.
    $this->clickLink('edit');
    $this->assertRaw($tmp_branch_info['project'], 'Project name appears on edit page');
    $this->assertRaw($tmp_branch_info['branch_name'], 'Branch name appears on edit page');
    $this->assertRaw($tmp_branch_info['project_title'], 'Project title appears on edit page');
    $this->assertRaw($tmp_branch_info['title'], 'Branch title appears on edit page');

    $this->drupalPost(NULL, $this->branch_info, t('Save branch'));

    // Now we should be back on the listing page. Test the reparse link.
    $this->assertTrue($this->howManyToParse() == 0, 'No files are marked to parse before clicking link');
    $this->clickLink('reparse');
    $this->assertText('8 files in branch ' . $this->branch_info['branch_name'] . ' set to reparse, starting at next cron run', 'Confirmation found after clicking reparse link');
    $this->assertTrue($this->howManyToParse() == 8, '8 files are marked to parse after clicking reparse link');
  }

  /**
   * Returns the number of files that have been marked as needing to be parsed.
   */
  function howManyToParse() {
    return db_result(db_query('SELECT COUNT(*) from {api_file} WHERE modified < 100'));
  }
}
