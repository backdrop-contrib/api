<?php

/**
 * @file
 * Tests module enable functionality for the API module.
 */

module_load_include('php', 'api', 'tests/api_test_case');

/**
 * Tests module enable and cron functionality.
 */
class ApiEnableTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => 'Module enable and cron',
      'description' => 'Tests module enable and cron functionality.',
      'group' => 'API module',
    );
  }

  function setUp() {
    // Start with only the support modules enabled.
    DrupalWebTestCase::setUp('ctools', 'gplib', 'node', 'dblog');

    $this->super_user = $this->drupalCreateUser(array(
      'access content',
      'access administration pages',
      'access site reports',
    ));
    $this->drupalLogin($this->super_user);

    $this->cronRun();
    $this->checkAndClearLog(array('Cron run completed'));
  }

  /**
   * Tests module enabling and cron for the API module.
   */
  function testEnable() {
    // Disable the comment module, if it is enabled.
    if (module_exists('comment')) {
      module_disable(array('comment'), FALSE);
      $this->resetAll();
    }
    $this->assertFalse(module_exists('comment'), 'Comment module is disabled');

    // Enable the API module. Run cron, and verify that it does not do the API
    // cron function (yet).
    $this->assertFalse(module_exists('api'), 'API module is not enabled');
    $modules = system_rebuild_module_data();
    $this->assertTrue(isset($modules['api']), 'System knows about API module');
    module_enable(array('api'), FALSE);
    $this->resetAll();
    $this->assertTrue(module_exists('api'), 'API module is enabled');
    $this->cronRun();
    $this->checkAndClearLog(array('Cron run completed'), array('Updated php branch php'));

    // Update user for API module functionality.
    $this->super_user = $this->drupalCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'access site reports',
    ));
    $this->drupalLogin($this->super_user);

    // Visit the API module admin page, to turn on API cron. Run cron and
    // verify that it does the API cron function this time.
    $this->drupalGet('admin/config/development/api');
    $this->cronRun();
    $this->checkAndClearLog(array('Cron run completed', 'Updated php branch php'));

    // Set the cron time for the PHP branch to weekly, so it doesn't get parsed
    // again. Set up a new branch. Run cron and verify that the PHP branch is
    // not parsed again, but the new branch is parsed (at least partially).
    $this->drupalGet('admin/config/development/api');
    $this->clickLink('edit');
    $this->drupalPost(NULL, array(
        'data[update_time]' => 604800,
      ),
      t('Save branch'));
    $this->branch_info = $this->setUpBranchUI();
    $this->resetBranchesAndCache();
    $this->cronRun();
    $this->checkAndClearLog(array(
        'Cron run completed',
        'Updated ' . $this->branch_info['project'] . ' branch ' . $this->branch_info['branch_name'],
        'API parse ' . $this->branch_info['branch_name'],
      ), array('Updated php branch php'));

    // Go ahead and parse the rest of the sample branch.
    module_load_include('inc', 'api', 'api.admin');
    module_load_include('inc', 'api', 'parser');
    api_update_all_branches();
    $this->processApiParseQueue();

    // Turn on the comment module. Change settings so that comments are allowed.
    // Verify that a comment can be added. Note that the Comments test covers
    // a bunch of other settings and tweaks; this test is so that we can verify
    // that if the API module is set up first, we can then enable comment and it
    // will work.
    module_enable(array('comment'), FALSE);
    $this->resetAll();
    $this->assertTrue(module_exists('comment'), 'Comment module is enabled');
    // Update user for comment module functionality.
    $this->super_user = $this->drupalCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'access site reports',
      'access comments',
      'post comments',
      'skip comment approval',
    ));
    $this->drupalLogin($this->super_user);

    $this->drupalPost('admin/config/development/api/comments', array(
        'comment' => 2,
      ), t('Save comment settings'));
    $this->clickLink(t('Apply current default comment settings to existing API pages'));
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->drupalPost(NULL, array(
        'subject' => 'Subject 1',
        'comment_body[und][0][value]' => 'Comment 1 body',
      ), t('Save'));
    $this->assertText(t('Your comment has been posted'), 'Confirm message appears');
    $this->assertLink('Subject 1', 0, 'Comment subject appears');
    $this->assertText('Comment 1 body', 'Comment body appears');
    $this->assertLink('reply', 0, 'Reply link appears');

    // Set the PHP branch to update every cron run, and verify it gets updated
    // at next cron run.
    $this->drupalGet('admin/config/development/api');
    $this->clickLink('edit');
    $this->drupalPost(NULL, array(
        'data[update_time]' => 0,
      ),
      t('Save branch'));
    $this->resetBranchesAndCache();
    $this->cronRun();
    $this->checkAndClearLog(array(
        'Cron run completed',
        'Updated ' . $this->branch_info['project'] . ' branch ' . $this->branch_info['branch_name'],
        'API parse ' . $this->branch_info['branch_name'],
        'Updated php branch php',
      ));
  }

  /**
   * Checks the log for messages, and then clears the log.
   *
   * @param $messages
   *   Array of messages to assert are in the log.
   * @param $notmessages
   *   Array of messages to assert are not in the log.
   */
  function checkAndClearLog($messages = array(), $notmessages = array()) {
    $this->drupalGet('admin/reports/dblog');
    foreach($messages as $message) {
      $this->assertRaw($message, "Message $message appears in the log");
    }
    foreach($notmessages as $message) {
      $this->assertNoRaw($message, "Message $message does not appear in the log");
    }
    $this->drupalPost(NULL, array(), t('Clear log messages'));
  }
}
