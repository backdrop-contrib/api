<?php

/**
 * @file
 * Tests module enable functionality for the API module.
 */

module_load_include('php', 'api', 'tests/api_test_case');

/**
 * Tests module enable and cron functionality.
 */
class ApiEnableTestCase extends ApiWebPagesBaseTest {
  // Log messages to look for.
  public $php_message = 'Updated PHP branch PHP functions';
  public $cron_message = 'Cron run completed';

  function setUp() {
    // Start with only the support modules enabled.
    BackdropWebTestCase::setUp('node', 'dblog', 'views', 'comment');

    config_set('api.settings', 'breaks_tag', '');
    $this->super_user = $this->backdropCreateUser(array(
      'access content',
      'access administration pages',
      'access site reports',
    ));
    $this->backdropLogin($this->super_user);

    $this->cronRun();
    $this->checkAndClearLog(array($this->cron_message));
  }

  /**
   * Tests module enabling and cron for the API module.
   */
  function testEnable() {
    // Disable the comment module, if it is enabled.
    if (module_exists('comment')) {
      module_disable(array('comment'), FALSE);
      $this->resetAll();
    }
    $this->assertFalse(module_exists('comment'), 'Comment module is disabled');

    // Enable the API module. Run cron, and verify that it does not do the API
    // cron function (yet).
    $this->assertFalse(module_exists('api'), 'API module is not enabled');
    $modules = system_rebuild_module_data();
    $this->assertTrue(isset($modules['api']), 'System knows about API module');
    module_enable(array('api'), FALSE);
    $this->resetAll();
    $this->assertTrue(module_exists('api'), 'API module is enabled');
    $this->cronRun();
    $this->checkAndClearLog(array($this->cron_message), array($this->php_message));

    // Update user for API module functionality.
    $this->super_user = $this->backdropCreateUser(array(
      'access API reference',
      'administer API reference',
      'access content',
      'access administration pages',
      'access site reports',
    ));
    $this->backdropLogin($this->super_user);

    // Visit the API module admin page, to turn on API cron. Run cron and
    // verify that it does the API cron function this time.
    $this->backdropGet('admin/config/development/api');
    $this->cronRun();
    $this->checkAndClearLog(array($this->cron_message, $this->php_message));

    // Set the cron time for the PHP branch to weekly, so it doesn't get parsed
    // again. Set up a new branch. Run cron and verify that the PHP branch is
    // not parsed again, but the new branch is parsed (at least partially).
    $this->backdropGet('admin/config/development/api/php_branches');
    $this->clickLink('edit');
    $this->backdropPost(NULL, array(
        'update_frequency' => 604800,
      ),
      t('Save branch'));
    $this->branch_info = $this->setUpBranchUI();
    $this->resetBranchesAndCache();
    $this->cronRun();
    $this->checkAndClearLog(array(
        $this->cron_message,
        'Updated ' . $this->branch_info['project'] . ' branch ' . $this->branch_info['branch_name'],
        'API parse ' . $this->branch_info['project'] . ' branch ' . $this->branch_info['branch_name'],
      ), array($this->php_message));

    // Run cron a few times more, which should be enough to parse the rest of
    // the sample branch. If the next test is failing, try adding more cron
    // runs.
    $this->cronRun();
    $this->cronRun();
    $this->cronRun();
    $count = $this->countParseQueue();
    $this->assertEqual(0, $count, "Parse queue is empty ($count)");

    // Spot check to verify that the shutdown function has run and all files are
    // parsed: check a class page and see if methods are there, and check a
    // function page and verify that calls are there.
    $this->backdropGet('api/' . $this->branch_info['project'] . '/classes.php/class/SubSample');
    $this->assertLink('Sample::baz', 0, 'Inherited method is shown');
    $this->assertLink('SubSample::bar', 0, 'Direct method is shown');
    $this->backdropGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_function');
    $this->assertRaw('10 calls to sample_function()', 'Calling text is shown');
    $this->assertRaw("1 string reference to 'sample_function'", 'String reference link is shown');

    // Turn on the comment module. Change settings so that comments are allowed.
    // Verify that a comment can be added. Note that the Comments test covers
    // a bunch of other settings and tweaks; this test is so that we can verify
    // that if the API module is set up first, we can then enable comment and it
    // will work.
    module_enable(array('comment'), FALSE);
    $this->resetAll();
    $this->assertTrue(module_exists('comment'), 'Comment module is enabled');
    // Update user for comment module functionality.
    $this->super_user = $this->backdropCreateUser(array(
      'access API reference',
      'administer API reference',
      'administer content types',
      'access content',
      'access administration pages',
      'access site reports',
      'access comments',
      'post comments',
      'skip comment approval',
    ));
    $this->backdropLogin($this->super_user);

    $this->backdropPost('admin/structure/types/manage/api', array(
      'comment_default' => 2,
    ), t('Save content type'));
    db_query("UPDATE {node} SET comment = 2 WHERE type = 'api'");
    $this->backdropGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->backdropPost(NULL, array(
        'subject' => 'Subject 1',
        'comment_body[und][0][value]' => 'Comment 1 body',
      ), t('Save'));
    $this->assertText(t('Your comment has been posted'), 'Confirm message appears');
    $this->assertLink('Subject 1', 0, 'Comment subject appears');
    $this->assertText('Comment 1 body', 'Comment body appears');
    $this->assertLink('reply', 0, 'Reply link appears');

    // Set the PHP branch to update every cron run, and verify it gets updated
    // at next cron run.
    $this->backdropGet('admin/config/development/api/php_branches');
    $this->clickLink('edit', 0);
    $this->backdropPost(NULL, array(
        'update_frequency' => 1,
      ),
      t('Save branch'));
    $this->resetBranchesAndCache();
    $this->cronRun();
    $this->checkAndClearLog(array(
        $this->cron_message,
        'Updated ' . $this->branch_info['project'] . ' branch ' . $this->branch_info['branch_name'],
        $this->php_message,
      ));
  }
}
