
/**
 * Tests multiple-branch functionality.
 */
class ApiMultipleBranchesTest extends ApiWebPagesBaseTest {

  /**
   * Array of information about the second sample branch.
   */
  protected $branch_info_2;

  public static function getInfo() {
    return array(
      'name' => 'Multiple branches functionality',
      'description' => 'Tests that the multiple-branch setup works correctly',
      'group' => 'API module',
    );
  }

  public function setUp() {
    $this->baseSetUp();

    // Create a "file" branch with the sample code, from the admin interface.
    $this->branch_info = $this->setUpBranchUI('', TRUE, array(
      'branch_name' => 'long_6',
      'project_title' => 'Project Test',
    ));

    // Create a second "file" branch in a different branch on the same project.
    // Exclude the "maybe_exclude" directory so that this branch
    // only has functions and not constants and classes.
    $this->branch_info_2 = $this->setUpBranchUI('', FALSE, array(
      'branch_name' => 'long_7',
      'project_title' => 'Project Test',
      'title' => 'Testing 7',
      'directory' => drupal_get_path('module', 'api') . '/tests/sample2',
      'excluded' => 'none',
    ));

    // Remove PHP branch.
    $this->removePHPBranch();

    // Parse the code.
    $this->resetBranchesAndCache();
    $this->updateBranches();
    $this->processApiParseQueue();
  }

  /**
   * Runs all tests in this section, to avoid multiple calls to setUp().
   */
  function testAll() {
    $this->_testBranchesCallingFunctions();
    $this->_testBranchLinks();
  }

  /**
   * Tests that the list of functions calling this function is branch-specific.
   */
  function _testBranchesCallingFunctions() {
    // Visit the sample.php function sample_function().
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_function');

    // Verify that there is only one function calling this function.
    $this->assertLink('1 call to sample_function()', 0, 'Only one calling function');
    $this->clickLink('1 call to sample_function()');
    // Verify links on the calling functions page.
    $this->assertLink('sample_in_code_links', 0, 'Calling function link is present');
    $this->assertNoLink('second_sample_function', 'Calling function from other branch link is not present');

    // Visit the other branch's function sample_function().
    $this->drupalGet('api/' . $this->branch_info_2['project'] . '/sample2.php/function/sample_function/' . $this->branch_info_2['branch_name']);

    // Verify that there is only one function calling this function.
    $this->assertLink('1 call to sample_function()', 0, 'Only one calling function');
    $this->clickLink('1 call to sample_function()');
    // Verify links in the calling functions page.
    $this->assertLink('second_sample_function', 0, 'Calling function link is present');
    $this->assertNoLink('sample_in_code_links', 'Calling function from other branch link is not present');
  }

  /**
   * Tests that the links between branches on pages are working.
   */
  function _testBranchLinks() {
    // Verify function-style linking.
    $this->drupalGet('api/' . $this->branch_info_2['project'] . '/sample2.php/function/sample_function/' . $this->branch_info_2['branch_name']);
    $this->assertRaw($this->branch_info['branch_name'] . ' sample.php', 'Other branch name and file name are shown');
    $this->assertRaw('$complex_parameter', 'Other sample parameter is shown');

    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/function/sample_function');
    $this->assertRaw($this->branch_info_2['branch_name'] . ' sample2.php', 'Other sample file and branch are shown');
    $this->assertLink('sample_function', 0, 'Other sample link is there');

    // Test constant-style linking.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/sample.php/constant/DUPLICATE_CONSTANT');
    $this->assertRaw($this->branch_info['branch_name'] . ' duplicates.php', 'Other file in same branch is shown');
    $this->assertRaw($this->branch_info_2['branch_name'] . ' maybe_exclude/extras.php', 'Other sample file and branch name are shown');
    $this->assertRaw($this->branch_info['project_title'], 'This project title is shown');

    // Test class and method linking.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->assertRaw($this->branch_info['branch_name'] . ' classes.php', 'This file name and branch are shown');
    $this->assertRaw($this->branch_info_2['branch_name'] . ' maybe_exclude/extras.php', 'Other sample file and branch name are shown');
    $this->assertRaw($this->branch_info['project_title'], 'This project title is shown');

    // Now visit the method page.
    $this->clickLink('Sample::foo');
    $this->assertRaw($this->branch_info['branch_name'] . ' classes.php', 'This file name and branch are shown');
    $this->assertRaw($this->branch_info_2['branch_name'] . ' extras.php', 'Other sample file and branch name are shown');
    $this->assertLink('2 calls to Sample::foo()', 0, 'Calling functions link is there');
    // Make sure the links go to the right place.
    $this->assertLinkURLSubstring('foo', 'extras.php/function/Sample', 'foo link exists', 'foo link went to the right place');
    // Note that there is also one Sample link in the breadcrumb.
    $this->assertLinkURLSubstring('Sample', 'classes.php/class/Sample', 'First Sample link exists', 'First Sample link went to the right place', 1);
    $this->assertLinkURLSubstring('Sample', 'extras.php/class/Sample', 'Second Sample link exists', 'Second Sample link went to the right place', 2);
    // Test the calling page.
    $this->clickLink('2 calls to Sample::foo()');
    $this->assertLink('Sample::baz', 0, 'Link to first calling function is there');
    $this->assertLink('SubSample::bar', 0, 'Link to second calling function is there');
    $this->assertLink('Sample::foo', 0, 'Breadcrumb link is there');
    $this->assertText('2 calls to Sample::foo()', 'Page title is there');

    // Now visit the class page in the other branch. Click through to the
    // method and verify that it doesn't show the DifferentClassName::foo()
    // method on that page at all, and vice versa.
    $this->drupalGet('api/' . $this->branch_info_2['project'] . '/maybe_exclude!extras.php/class/Sample/' . $this->branch_info_2['branch_name']);
    $this->clickLink('Sample::foo');
    $this->assertRaw($this->branch_info['branch_name'] . ' classes.php', 'This file name and branch are shown');
    $this->assertRaw($this->branch_info_2['branch_name'] . ' extras.php', 'Other sample file and branch name are shown');
    $this->assertNoRaw('DifferentClassName', 'Other class is not shown');

    $this->drupalGet('api/' . $this->branch_info_2['project'] . '/maybe_exclude!extras.php/class/DifferentClassName/' . $this->branch_info_2['branch_name']);
    $this->assertNoRaw('classes.php', 'Name of other project file is not shown');
    $this->clickLink('DifferentClassName::foo');
    $this->assertNoRaw($this->branch_info['branch_name'] . ' classes.php', 'This file name and branch are shown');
    $this->assertRaw($this->branch_info_2['branch_name'] . ' extras.php', 'Other sample file and branch name are shown');
    $this->assertNoRaw('Sample::foo', 'Sample method name is not shown');
  }
}
