<?php
// $Id$

/**
 * @file
 * Generates and displays API documentation pages.
 *
 * This is an implementation of a subset of the Doxygen documentation
 * generator specification, tuned to produce output that best benefits
 * the Drupal code base.  It is designed to assume the code it
 * documents follows Drupal coding conventions, and supports the
 * following Doxygen constructs:
 *   \@mainpage
 *   \@file
 *   \@defgroup
 *   \@ingroup
 *   \@addtogroup (as a synonym of \@ ingroup)
 *   \@param
 *   \@return
 *   \@link
 *
 * See http://drupal.org/node/1354 for more information on how to document code
 * so that the API module can read it.
 */

/**
 * Regular expression for matching file names.
 */
define('API_RE_FILENAME', '([a-zA-Z0-9_-]+(?:\.[a-zA-Z0-9_-]+)+)');

/**
 * Regular expression for starting inline \@tags.
 */
define('API_RE_TAG_START', '(?<!\\\)@');

/**
 * Implementation of hook_help().
 */
function api_help($path, $arg) {
  switch ($path) {
    case 'admin/help#api':
      return t('
<p>This is an implementation of a subset of the Doxygen documentation generator specification, tuned to produce output that best benefits the Drupal code base.</p>

<p>It is designed to assume the code it documents follows Drupal coding conventions, and supports the following Doxygen constructs:</p>
<ul>
  <li>@mainpage</li>
  <li>@file</li>
  <li>@defgroup</li>
  <li>@ingroup</li>
  <li>@addtogroup (as a synonym of @ ingroup)</li>
  <li>@param</li>
  <li>@return</li>
  <li>@link</li>
  <li>@see</li>
  <li>@{</li>
  <li>@}</li>
</ul>

<p>The module was designed to produce the Drupal developer documentation available at !api_site.</p>

<p><strong>Set up</strong><p>

<p>Visit the !api_settings_page to configure the module. You must have the relevant Drupal code base on the same machine as the site hosting the API module. Follow the descriptions in the \'Branches to index\' section to set up the code base for indexing.</p>

<p>Indexing of PHP functions is also supported. If the site has internet access, then the default settings for the \'PHP Manual\' section should work fine. For local development environments that have a PHP manual installed, you can edit the paths to point to the appropriate locations.</p>

<p>The module indexes code branches during cron runs, so make sure the site has cron functionality set up properly.</p>
', array('!api_site' => l('http://api.drupal.org', 'http://api.drupal.org', array('absolute' => TRUE)), '!api_settings_page' => l(t('API settings page'), 'admin/settings/api')));

    case 'admin/settings/api/refresh':
      return t('Parse all indexed code files again, even if they have not been modified.');
  }
}

/**
 * Returns a list of all defined branches.
 *
 * @param $_reset
 *   If set to TRUE, the cached return value is reset.
 *
 * @return
 *   Array of branch objects, in order by branch weight.
 */
function api_get_branches($_reset = FALSE) {
  static $branches;

  if (!isset($branches) || $_reset) {
    $result = db_query("SELECT branch_id, project, branch_name, title, type, data, status FROM {api_branch} ORDER BY weight");
    $branches = array();
    while ($branch = db_fetch_object($result)) {
      drupal_unpack($branch);
      $branches[$branch->branch_id] = $branch;
    }
  }

  return $branches;
}

/**
 * Returns the list of currently-used branch names across all projects.
 *
 * @param $_reset
 *   If set to TRUE, the cached return value is reset.
 *
 * @return
 *   Array of branch names in use.
 */
function api_get_branch_names($_reset = FALSE) {
  static $branch_names;

  if (!isset($branch_names) || $_reset) {
    $result = db_query("SELECT DISTINCT branch_name FROM {api_branch} WHERE status = 1");
    $branch_names = array();
    while ($branch = db_fetch_object($result)) {
      $branch_names[$branch->branch_name] = $branch->branch_name;
    }
  }

  return $branch_names;
}

/**
 * Implementation of hook_menu().
 */
function api_menu() {
  $items = array();
  $branches = api_get_branches();
  if (count($branches)) {
    $default_branch = $branches[variable_get('api_default_branch', NULL)];
    $projects = array();
    // We need a default branch for each project. If a project has a branch_name
    // matching $default_branch, use that. Otherwise, use the max. This assumes
    // branch names like '5' and '6'.
    foreach ($branches as $branch) {
      if ($branch->status) {
        if (!isset($projects[$branch->project])) {
          $projects[$branch->project] = array(
            'max branch' => $branch->branch_name,
            'use branch' => NULL,
          );
        }
        else {
          $projects[$branch->project]['max branch'] = max($projects[$branch->project]['max branch'], $branch->branch_name);
        }
        if ($branch->branch_name === $default_branch->branch_name) {
          $projects[$branch->project]['use branch'] = $branch->branch_name;
        }
      }
    }
    foreach (array_keys($projects) as $project) {
      if (is_null($projects[$project]['use branch'])) {
        $projects[$project]['use branch'] = $projects[$project]['max branch'];
      }
    }

    // Part 1: No object, Default branch
    $items['api/search'] = array(
      'title' => 'API Search',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('api_search_form', $default_branch),
      'access arguments' => array('access API reference'),
      'type' => MENU_CALLBACK,
    );
    $items['apis'] = array(
      'title' => 'API search',
      'page callback' => 'api_search_redirect',
      'access arguments' => array('access API reference'),
      'type' => MENU_CALLBACK,
    );
  }

  // Admin
  $items['admin/settings/api'] = array(
    'title' => 'API reference',
    'description' => 'Configure branches for documentation.',
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('api_page_admin_form'),
    'file' => 'api.admin.inc',
  );
  $items['admin/settings/api/branches'] = array(
    'title' => 'Branches',
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/api/branches/list'] = array(
    'title' => 'List',
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/settings/api/branches/new'] = array(
    'title' => 'New branch',
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'page callback' => 'api_admin_new_branch_page',
    'file' => 'api.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/api/branches/new/%'] = array(
    'title' => 'New branch',
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('api_branch_edit_form', 5),
    'file' => 'api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/api/branches/%'] = array(
    'title' => 'Edit branch',
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('api_branch_edit_form', 4),
    'file' => 'api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/api/branches/%/delete'] = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('api_branch_delete_form', 4),
    'file' => 'api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  if (module_exists('comment')) {
    $items['admin/settings/api/comments'] = array(
      'title' => 'Comments',
      'access arguments' => array('administer API reference'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('api_comments_settings_form'),
      'file' => 'api.admin.inc',
    );
  }

  // OpenSearch metadata callback.
  $items['api/opensearch/%'] = array(
    'page callback' => 'api_opensearch',
    'page arguments' => array(2),
    'access arguments' => array('access API reference'),
    'type' => MENU_CALLBACK,
  );

  // OpenSearch suggestions callback.
  $items['api/suggest/%/%menu_tail'] = array(
    'page callback' => 'api_suggest',
    'page arguments' => array(2, 3),
    'access arguments' => array('access API reference'),
    'type' => MENU_CALLBACK,
  );

  // Autocomplete callback.
  // This returns ALL possibilities for a branch name.
  $items['api/autocomplete/%'] = array(
    'page callback' => 'api_autocomplete',
    'page arguments' => array(2, TRUE),
    'access arguments' => array('access API reference'),
    'type' => MENU_CALLBACK,
  );

  // Function dumps for IDEs and code editors.
  $items['api/function_dump/%'] = array(
    'page callback' => 'api_page_function_dump',
    'page arguments' => array(2),
    'access arguments' => array('access API reference'),
    'type' => MENU_CALLBACK,
  );

  foreach (api_get_branch_names() as $branch) {
    $items['api/search/'. $branch .'/%menu_tail'] = array(
      'title' => $branch,
      'page callback' => 'api_search_listing',
      'page arguments' => array($branch, 3),
      'access arguments' => array('access API reference'),
      'type' => MENU_LOCAL_TASK,
    );
  }

  foreach ($branches as $branch) {
    if ($branch->status) {
      $is_default = ($branch->branch_name === $projects[$branch->project]['use branch']);

      // Main branch page
      if ($is_default) {
        $items['api/' . $branch->project] = array(
          'title' => 'API reference',
          'page callback' => 'api_page_branch',
          'page arguments' => array($branch),
          'access arguments' => array('access API reference'),
          'type' => $branch->branch_id === $default_branch->branch_id ? MENU_NORMAL_ITEM : MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/' . $branch->branch_name] = array(
        'title' => $branch->title,
        'page callback' => 'api_page_branch',
        'page arguments' => array($branch),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );

      // Listings
      if ($is_default) {
        $items['api/' . $branch->project . '/functions'] = array(
          'title' => 'Functions',
          'page callback' => 'api_page_listing',
          'access arguments' => array('access API reference'),
          'page arguments' => array($branch, 'function'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/functions/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'page callback' => 'api_page_listing',
        'page arguments' => array($branch, 'function'),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
      if ($is_default) {
        $items['api/' . $branch->project . '/constants'] = array(
          'title' => 'Constants',
          'page callback' => 'api_page_listing',
          'access arguments' => array('access API reference'),
          'page arguments' => array($branch, 'constant'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/constants/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'page callback' => 'api_page_listing',
        'page arguments' => array($branch, 'constant'),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
      if ($is_default) {
        $items['api/' . $branch->project . '/globals'] = array(
          'title' => 'Globals',
          'page callback' => 'api_page_listing',
          'access arguments' => array('access API reference'),
          'page arguments' => array($branch, 'global'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/globals/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'page callback' => 'api_page_listing',
        'page arguments' => array($branch, 'global'),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
      if ($is_default) {
        $items['api/' . $branch->project . '/files'] = array(
          'title' => 'Files',
          'page callback' => 'api_page_listing',
          'access arguments' => array('access API reference'),
          'page arguments' => array($branch, 'file'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/files/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'page callback' => 'api_page_listing',
        'page arguments' => array($branch, 'file'),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
      if ($is_default) {
        $items['api/' . $branch->project . '/classes'] = array(
          'title' => 'Classes',
          'page callback' => 'api_page_listing',
          'access arguments' => array('access API reference'),
          'page arguments' => array($branch, 'class'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/classes/' . $branch->branch_name] = array(
        'title' => $branch->title,
        'page callback' => 'api_page_listing',
        'page arguments' => array($branch, 'class'),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
      if ($is_default) {
        $items['api/' . $branch->project . '/groups'] = array(
          'title' => 'Topics',
          'page callback' => 'api_page_listing',
          'access arguments' => array('access API reference'),
          'page arguments' => array($branch, 'group'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/groups/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'page callback' => 'api_page_listing',
        'page arguments' => array($branch, 'group'),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );

      // Functions
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename/function/%api_object'] = array(
          'title' => 'Function',
          'load arguments' => array($branch, 'function', 2),
          'page callback' => 'api_page_function',
          'page arguments' => array($branch, 4),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/function/%api_object/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch, 'function', 2),
        'page callback' => 'api_page_function',
        'page arguments' => array($branch, 4),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );

      // Constants
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename/constant/%api_object'] = array(
          'title' => 'Constant',
          'load arguments' => array($branch, 'constant', 2),
          'page callback' => 'api_page_constant',
          'page arguments' => array($branch, 4),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/constant/%api_object/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch, 'constant', 2),
        'page callback' => 'api_page_constant',
        'page arguments' => array($branch, 4),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );

      // Globals
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename/global/%api_object'] = array(
          'title' => 'Global',
          'load arguments' => array($branch, 'global', 2),
          'page callback' => 'api_page_global',
          'page arguments' => array($branch, 4),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/global/%api_object/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch, 'global', 2),
        'page callback' => 'api_page_global',
        'page arguments' => array($branch, 4),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );

      // Properties
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename/property/%api_object'] = array(
          'title' => 'Property',
          'load arguments' => array($branch, 'property', 2),
          'page callback' => 'api_page_property',
          'page arguments' => array($branch, 4),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/property/%api_object/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch, 'property', 2),
        'page callback' => 'api_page_property',
        'page arguments' => array($branch, 4),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );

      // Classes
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename/class/%api_object'] = array(
          'title' => 'Class',
          'load arguments' => array($branch, 'class', 2),
          'page callback' => 'api_page_class',
          'page arguments' => array($branch, 4),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/class/%api_object/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch, 'class', 2),
        'page callback' => 'api_page_class',
        'page arguments' => array($branch, 4),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
      // Interfaces
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename/interface/%api_object'] = array(
          'title' => 'Class',
          'load arguments' => array($branch, 'interface', 2),
          'page callback' => 'api_page_class',
          'page arguments' => array($branch, 4),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/interface/%api_object/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch, 'interface', 2),
        'page callback' => 'api_page_class',
        'page arguments' => array($branch, 4),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );

      // Files
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename'] = array(
          'title' => 'File',
          'load arguments' => array($branch),
          'page callback' => 'api_page_file',
          'page arguments' => array($branch, 2),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch),
        'page callback' => 'api_page_file',
        'page arguments' => array($branch, 2),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
      $items['api/' . $branch->project . '/%api_filename/'. $branch->branch_name .'/documentation'] = array(
        'title' => 'View documentation',
        'load arguments' => array($branch),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );
      $items['api/' . $branch->project . '/%api_filename/'. $branch->branch_name .'/source'] = array(
        'title' => 'View source',
        'load arguments' => array($branch),
        'page callback' => 'api_page_file_source',
        'page arguments' => array($branch, 2),
        'access arguments' => array('access API reference'),
        'type' => MENU_LOCAL_TASK,
      );

      // Groups
      if ($is_default) {
        $items['api/' . $branch->project . '/%api_filename/group/%api_object'] = array(
          'title' => 'Topic',
          'load arguments' => array($branch, 'group', 2),
          'page callback' => 'api_page_group',
          'page arguments' => array($branch, 4),
          'access arguments' => array('access API reference'),
          'type' => MENU_CALLBACK,
        );
      }
      $items['api/' . $branch->project . '/%api_filename/group/%api_object/'. $branch->branch_name] = array(
        'title' => $branch->title,
        'load arguments' => array($branch, 'group', 2),
        'page callback' => 'api_page_group',
        'page arguments' => array($branch, 4),
        'access arguments' => array('access API reference'),
        'type' => $is_default ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      );
    }
  }

  // Redirect old links.
  $items['api/file/%menu_tail'] = array(
    'page callback' => 'api_file_redirect',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'legacy.inc',
  );

  return $items;
}

/**
 * Menu object load callback for %api_filename in menu paths.
 *
 * Loads information about an API file.
 */
function api_filename_load($file_name, $branch) {
  return api_object_load(str_replace('--', '/', $file_name), $branch, 'file');
}

/**
 * Menu object load callback for %api_object in menu paths.
 *
 * Loads an object from its name, type, and branch.
 *
 * @param $object_name_or_did
 *   The string object name or int did to load.
 * @param $branch
 *   Branch object.
 * @param $object_type
 *   A string type, or array of strings. class, interface, function, etc.
 */
function api_object_load($object_name_or_did, $branch, $object_type, $file_name = NULL) {
  static $cache;

  if (!is_array($object_type)) {
    $object_type = array($object_type);
  }
  $key = $object_name_or_did .':'. implode('-', $object_type) .':'. $branch->branch_id;
  if (!isset($cache[$key])) {
    // Prepare the query
    $tables = array('{api_documentation} ad');
    $fields = array('ad.did', 'ad.branch_id', 'ad.object_name', 'ad.object_type', 'ad.title', 'ad.file_name', 'ad.summary', 'ad.documentation', 'ad.code', 'ad.start_line', 'ad.see', 'ad.class_did');
    $where = "WHERE ad.object_type IN (" . db_placeholders($object_type, 'text') . ") AND ad.branch_id = %d";
    $arguments = $object_type;
    $arguments[] = $branch->branch_id;
    if (is_int($object_name_or_did)) {
      $where .= " AND ad.did = %d";
      $arguments[] = $object_name_or_did;
    }
    else {
      $where .= " AND ad.object_name = '%s'";
      $arguments[] = $object_name_or_did;
    }

    if (!in_array('file', $object_type)) {
      $file = api_filename_load($file_name, $branch);
      $where .= " AND ad.file_name = '%s'";
      $arguments[] = $file->file_name;
    }

    if (in_array('function', $object_type)) {
      $tables[] = 'LEFT JOIN {api_function} af ON af.did = ad.did';
      $fields[] = 'af.*';
    }
    elseif (in_array('file', $object_type)) {
      $tables[] = 'LEFT JOIN {api_file} af ON af.did = ad.did';
      $fields[] = 'af.*';
    }
    // Now build it
    $cache[$key] = db_fetch_object(db_query_range('SELECT '. implode(', ', $fields) .' FROM '. implode(' ', $tables) .' '. $where, $arguments, 0, 1));
  }

  return $cache[$key];
}

/**
 * Implementation of hook_perm().
 */
function api_perm() {
  return array('access API reference', 'administer API reference');
}

/**
 * Implementation of hook_theme().
 */
function api_theme() {
  return array(
    'api_branch_table' => array(
      'arguments' => array('element' => NULL),
    ),
    'api_expandable' => array(
      'arguments' => array(
        'prompt' => NULL,
        'content' => NULL,
        'class' => NULL,
      ),
      'template' => 'templates/api-expandable',
    ),
    'api_defined' => array(
      'arguments' => array(
        'branch' => NULL,
        'object' => NULL,
      ),
      'template' => 'templates/api-defined',
    ),
    'api_related_topics' => array(
      'arguments' => array(
        'topics' => array(),
      ),
      'template' => 'templates/api-related-topics',
    ),
    'api_functions' => array(
      'arguments' => array(
        'functions' => array(),
      ),
      'template' => 'templates/api-functions',
    ),
    'api_function_page' => array(
      'arguments' => array(
        'branch' => NULL,
        'function' => NULL,
        'signatures' => NULL,
        'documentation' => NULL,
        'parameters' => NULL,
        'return' => NULL,
        'related_topics' => NULL,
        'call' => NULL,
        'code' => NULL,
        'see' => NULL,
      ),
      'template' => 'templates/api-function-page',
    ),
    'api_constant_page' => array(
      'arguments' => array(
        'branch' => NULL,
        'constant' => NULL,
        'documentation' => NULL,
        'code' => NULL,
        'related_topics' => NULL,
        'see' => NULL,
      ),
      'template' => 'templates/api-constant-page',
    ),
    'api_global_page' => array(
      'arguments' => array(
        'branch' => NULL,
        'global' => NULL,
        'documentation' => NULL,
        'code' => NULL,
        'related_topics' => NULL,
        'see' => NULL,
      ),
      'template' => 'templates/api-global-page',
    ),
    'api_property_page' => array(
      'arguments' => array(
        'branch' => NULL,
        'property' => NULL,
        'documentation' => NULL,
        'code' => NULL,
        'related_topics' => NULL,
        'see' => NULL,
      ),
      'template' => 'templates/api-property-page',
    ),
    'api_class_page' => array(
      'arguments' => array(
        'branch' => NULL,
        'class' => NULL,
        'documentation' => NULL,
        'hierarchy' => NULL,
        'constants' => NULL,
        'properties' => NULL,
        'methods' => NULL,
        'code' => NULL,
        'related_topics' => NULL,
        'see' => NULL,
      ),
      'template' => 'templates/api-class-page',
    ),
    'api_file_page' => array(
      'arguments' => array(
        'file' => NULL,
        'documentation' => NULL,
        'interfaces' => NULL,
        'classes' => NULL,
        'constants' => NULL,
        'globals' => NULL,
        'functions' => NULL,
        'see' => NULL,
        'related_topics' => NULL,
      ),
      'template' => 'templates/api-file-page'
    ),
    'api_group_page' => array(
      'arguments' => array(
        'branch' => NULL,
        'group' => NULL,
        'documentation' => NULL,
        'constants' => NULL,
        'globals' => NULL,
        'functions' => NULL,
        'files' => NULL,
        'see' => NULL,
      ),
      'template' => 'templates/api-group-page'
    ),
    'api_branch_default_page' => array(
      'arguments' => array(
        'branch' => NULL,
      ),
      'template' => 'templates/api-branch-default-page'
    ),
  );
}

/**
 * Theme preprocess function for api-function-page.tpl.php.
 */
function api_preprocess_api_function_page(&$variables) {
  $variables['defined'] = theme('api_defined', $variables['branch'], $variables['function']);
}

/**
 * Theme preprocess function for api-constant-page.tpl.php.
 */
function api_preprocess_api_constant_page(&$variables) {
  $variables['defined'] = theme('api_defined', $variables['branch'], $variables['constant']);
}

/**
 * Theme preprocess function for api-global-page.tpl.php.
 */
function api_preprocess_api_global_page(&$variables) {
  $variables['defined'] = theme('api_defined', $variables['branch'], $variables['global']);
}

/**
 * Theme preprocess function for api-global-page.tpl.php.
 */
function api_preprocess_api_class_page(&$variables) {
  $variables['defined'] = theme('api_defined', $variables['branch'], $variables['class']);
}

/**
 * Theme preprocess function for api-group-page.tpl.php.
 */
function api_preprocess_api_group_page(&$variables) {
  $variables['defined'] = theme('api_defined', $variables['branch'], $variables['group']);
}

/**
 * Implementation of hook_init().
 *
 * Adds CSS and JavaScript for the search auto-complete. Adds OpenSearch
 * autodiscovery links. Redirects nodes of type 'api' to the correct URL.
 */
function api_init() {
  drupal_add_css(drupal_get_path('module', 'api') . '/jquery-autocomplete/jquery.autocomplete.css');
  drupal_add_js(drupal_get_path('module', 'api') . '/jquery-autocomplete/jquery.autocomplete.js');
  drupal_add_css(drupal_get_path('module', 'api') . '/api.css');
  drupal_add_js(drupal_get_path('module', 'api') . '/api.js');

  // Add OpenSearch autodiscovery links.
  foreach (api_get_branch_names() as $branch_name) {
    $title = t('Drupal API @branch', array('@branch' => $branch_name));
    $url = url('api/opensearch/'. $branch_name, array('absolute' => TRUE));
    drupal_set_html_head('<link rel="search" type="application/opensearchdescription+xml" href="'. $url .'" title="'. $title .'" />');
  }

  // If we happen to be on an API node page, redirect.
  if (($node = menu_get_object()) && $node->type == 'api') {
    $documentation = db_fetch_object(db_query('SELECT * FROM {api_documentation} WHERE did = %d', $node->nid));
    drupal_goto('api/' . $documentation->object_type . '/' . $documentation->object_name . '/' . $documentation->branch_name);
  }
}

/**
 * Implementation of hook_db_rewrite_sql().
 *
 * Excludes nodes of type 'api' from node queries.
 */
function api_db_rewrite_sql($query, $primary_table, $primary_field) {
  if ($primary_field == 'nid' && $primary_table == 'n') {
    return array('where' => "n.type <> 'api'");
  }
}

/**
 * Implementation of hook_block().
 */
function api_block($op, $delta = NULL, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        'api-search' => array(
          'info' => t('API search'),
          'cache' => BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_PER_USER,
        ),
        'navigation' => array(
          'info' => t('API navigation'),
          'cache' => BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_PER_ROLE,
        ),
      );

    case 'view':
      $branch = api_get_active_branch();

      switch ($delta) {
        case 'api-search':
          if (user_access('access API reference') && !empty($branch)) {
            return array(
              'subject' => t('Search @branch', array('@branch' => $branch->branch_name)),
              'content' => drupal_get_form('api_search_form', $branch),
            );
          }
          return;

        case 'navigation':
          if (user_access('access API reference') && !empty($branch)) {
            $links = array();
            $links[] = l($branch->title, 'api/' . $branch->project . '/' . $branch->branch_name);
            $links[] = l(t('Constants'), 'api/' . $branch->project . '/constants/' . $branch->branch_name);
            $links[] = l(t('Classes'), 'api/' . $branch->project . '/classes/' . $branch->branch_name);
            $links[] = l(t('Files'), 'api/' . $branch->project . '/files/' . $branch->branch_name);
            $links[] = l(t('Functions'), 'api/' . $branch->project . '/functions/' . $branch->branch_name);
            $links[] = l(t('Globals'), 'api/' . $branch->project . '/globals/' . $branch->branch_name);
            $links[] = l(t('Topics'), 'api/' . $branch->project . '/groups/' . $branch->branch_name);

            return array(
              'subject' => t('API Navigation'),
              'content' => theme('item_list', $links),
            );
          }
          return;
      }
  }
}

/**
 * Implementation of hook_filter().
 */
function api_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('API filter'));

    case 'description':
      return t('Add links to API objects, like theme() or theme.inc.');

    case 'process':
      return api_filter_documentation($text, api_get_active_branch());

    default:
      return $text;
  }
}

/**
 * Constructs a link to an API object page.
 *
 * @param $object
 *   An API object with object_type, object_name, and file_name properties.
 * @param $file
 *   TRUE links to the object’s containing file, FALSE links to the object
 *   itself.
 *
 * @return
 *   A URL string.
 */
function api_url($object, $file = FALSE) {
  $branches = api_get_branches();
  if ($file) {
    return 'api/' . $branches[$object->branch_id]->project . '/' . str_replace('/', '--', $object->file_name) . '/' . $branches[$object->branch_id]->branch_name;
  }
  elseif ($object->object_type === 'file') {
    return 'api/' . $branches[$object->branch_id]->project . '/' . str_replace('/', '--', $object->object_name) . '/' . $branches[$object->branch_id]->branch_name;
  }
  else {
    return 'api/' . $branches[$object->branch_id]->project . '/' . str_replace('/', '--', $object->file_name) . '/' . $object->object_type . '/' . $object->object_name . '/' . $branches[$object->branch_id]->branch_name;
  }
}

/**
 * Shows a link for theme('api_expandable').
 */
function api_show_l($text) {
  return l($text, $_REQUEST['q'], array('attributes' => array('class' => 'show-content')));
}

/**
 * Hides a link for theme('api_expandable').
 */
function api_hide_l($text) {
  return l($text, $_REQUEST['q'], array('attributes' => array('class' => 'hide-content')));
}

/**
 * Saves an API branch.
 *
 * @param $branch
 *   A branch object, with branch_name, title, and directories variables.
 * @param $old_branch_name
 *   To replace a branch, provide the old branch name.
 */
function api_save_branch($branch) {
  $branch->data = serialize($branch->data);
  if (empty($branch->branch_id)) {
    drupal_write_record('api_branch', $branch);
    if (is_null(variable_get('api_default_branch', NULL))) {
      variable_set('api_default_branch', $branch->branch_id);
    }
  }
  else {
    drupal_write_record('api_branch', $branch, 'branch_id');
  }

  // Reweight all branches.
  api_get_branch_names(TRUE);
  $branches = api_get_branches(TRUE);
  usort($branches, 'api_branch_sort');
  $weight = 0;
  foreach ($branches as $branch) {
    $branch->weight = $weight;
    $weight += 1;
    drupal_write_record('api_branch', $branch, 'branch_id');
  }

  menu_rebuild();
}

/**
 * Sort callback for sorting branches.
 */
function api_branch_sort($a, $b) {
  return version_compare($a->branch_name, $b->branch_name);
}

/**
 * Returns the currently active branch.
 */
function api_get_active_branch() {
  static $branch;

  if (!isset($branch)) {
    $item = menu_get_item();
    $branches = api_get_branches();
    $branch_names = api_get_branch_names();
    $default_branch = variable_get('api_default_branch', NULL);
    if (isset($item['page_arguments'][0]->branch_name)) {
      $branch = $item['page_arguments'][0];
    }
    elseif (isset($branch_names[$item['page_arguments'][0]])) {
      // Search page, use the default project if possible
      foreach ($branches as $possible_branch) {
        if ($possible_branch->project === $branches[$default_branch]->project && $possible_branch->branch_name === $item['page_arguments'][0]) {
          $branch = $possible_branch;
        }
      }
    }
    if (!isset($branch)) {
      if (!is_null($default_branch)) {
        $branch = $branches[$default_branch];
      }
      else {
        $branch = NULL;
      }
    }
  }

  return $branch;
}

/**
 * Form builder for API search form.
 *
 * @param $branch
 *   Branch to build the search form for.
 *
 * @see api_search_form_submit()
 */
function api_search_form($form_state, $branch) {
  drupal_add_js(array('apiAutoCompletePath' => base_path() . variable_get('api_autocomplete_path_' . $branch->branch_name, url('api/autocomplete/' . $branch->branch_name))), 'setting');
  $form = array(
    '#token' => FALSE,
  );

  $form['#branch'] = $branch;
  $form['search'] = array(
    '#title' => t('Function, file, or topic'),
    '#type' => 'textfield',
    '#default_value' => '',
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Form submission handler for api_search_form().
 */
function api_search_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'api/search/'. $form['#branch']->branch_name .'/'. $form_state['values']['search'];
}

/**
 * Page callback for path 'apis'.
 */
function api_search_redirect() {
  $args = func_get_args();
  if (count($args) === 0 && strpos($_GET['q'], 'apis/') !== 0) {
    // Handling 404.
    $tail = $_REQUEST['q'];
  }
  else {
    $tail = implode('/', $args);
  }
  $branches = api_get_branches();
  $_REQUEST['destination'] = 'api/search/'. $branches[variable_get('api_default_branch', NULL)]->branch_name .'/'. $tail;
  drupal_goto();
}

/**
 * Page callback for path api/search/[branch] -- performs a search.
 */
function api_search_listing($branch_name) {
  $search_text = func_get_args();
  array_shift($search_text);
  $search_text = implode('/', $search_text);
  drupal_set_title(t('Search for %search', array('%search' => $search_text)));

  $count = db_result(db_query("SELECT COUNT(d.title) FROM {api_branch} b INNER JOIN {api_documentation} d ON b.branch_id = d.branch_id WHERE b.branch_name = '%s' AND d.title = '%s'", $branch_name, $search_text));
  if ($count == 1) {
    // Exact match.
    $item = db_fetch_object(db_query("SELECT b.branch_name, b.project, d.* FROM {api_branch} b INNER JOIN {api_documentation} d ON b.branch_id = d.branch_id WHERE b.branch_name = '%s' AND d.title = '%s'", $branch_name, $search_text));
    $branches = api_get_branches();
    drupal_goto(api_url($item));
  }
  else {
    // Wildcard search.
    $result = pager_query("SELECT b.branch_id, b.branch_name, b.project, d.* FROM {api_branch} b INNER JOIN {api_documentation} d ON b.branch_id = d.branch_id WHERE b.branch_name = '%s' AND d.object_name LIKE '%%%s%%' ORDER BY d.title", 50, 0, NULL, $branch_name, $search_text);
    return api_render_listing($result, t('No search results found.')) . theme('pager', NULL, 50, 0);
  }
}

/**
 * Prepares a listing of documentation objects for a branch.
 *
 * @param $branch_name
 *   Name of the branch to list.
 * @param $page
 *   TRUE if this will be embedded in a page, and FALSE if it is an AHAH
 *   callback.
 *
 * @return
 *   JavaScript listing of all the objects in the branch.
 */
function api_autocomplete($branch_name, $page = TRUE) {
  $result = db_query("SELECT d.title, d.object_type FROM {api_documentation} d INNER JOIN {api_branch} b ON d.branch_id = b.branch_id WHERE b.branch_name = '%s' AND d.object_type <> 'mainpage' ORDER BY LENGTH(d.title)", $branch_name);
  $objects = array();
  while ($object = db_fetch_object($result)) {
    $objects[] = $object->title;
  }

  if ($page) {
    drupal_json($objects);
  }
  else {
    return drupal_to_js($objects);
  }
}

/**
 * Page callback for path api/opensearch/[branch] - OpenSearch plugin.
 *
 * @param $branch_name
 *   Name of the branch to search.
 *
 * @see https://developer.mozilla.org/en/Creating_OpenSearch_plugins_for_Firefox
 */
function api_opensearch($branch_name) {
  if (!db_result(db_query("SELECT 1 FROM {api_branch} WHERE branch_name = '%s'", $branch_name))) {
    return drupal_not_found();
  }

  drupal_set_header('Content-Type: text/xml; charset=utf-8');

  $short_name = t('Drupal API @branch', array('@branch' => $branch_name));
  $description = t('Drupal @branch API documentation', array('@branch' => $branch_name));
  if ($image = theme_get_setting('favicon')) {
    // Get rid of base_path that theme_get_setting() added.
    $image = substr($image, strlen(base_path()));
  }
  else {
    // Fall back on default favicon if the theme didn't provide one.
    $image = 'misc/favicon.ico';
  }
  $image = url($image, array('absolute' => TRUE));
  $search_url = url('api/search/'. $branch_name, array('absolute' => TRUE)) .'/{searchTerms}';
  $suggest_url = url('api/suggest/'. $branch_name, array('absolute' => TRUE)) .'/{searchTerms}';
  $search_form_url = url('api', array('absolute' => TRUE));
  $self_url = url($_GET['q'], array('absolute' => TRUE));

  print <<<EOD
<OpenSearchDescription xmlns="http://a9.com/-/spec/opensearch/1.1/"
                       xmlns:moz="http://www.mozilla.org/2006/browser/search/">
<ShortName>$short_name</ShortName>
<Description>$description</Description>
<InputEncoding>UTF-8</InputEncoding>
<Image width="16" height="16" type="image/x-icon">$image</Image>
<Url type="text/html" method="GET" template="$search_url" />
<Url type="application/x-suggestions+json" template="$suggest_url"/>
<Url type="application/opensearchdescription+xml" rel="self" template="$self_url" />
<moz:SearchForm>$search_form_url</moz:SearchForm>
</OpenSearchDescription>
EOD;
}

/**
 * Prepares a list of potential documentation matches for OpenSearch.
 *
 * The list is printed out as JavaScript.
 *
 * @param $branch
 *   Name of the branch to list.
 * @param ...
 *   The string to search for.
 *
 * @see http://www.opensearch.org/Specifications/OpenSearch/Extensions/Suggestions/1.0
 */
function api_suggest($branch) {
  $matches = array();
  $search = func_get_args();
  array_shift($search);
  $result = db_query_range("SELECT d.title FROM {api_documentation} d INNER JOIN {api_branch} b ON d.branch_id = b.branch_id WHERE d.title LIKE '%%%s%%' AND b.branch_name = '%s' ORDER BY LENGTH(d.title)", implode('/', str_replace('_', '\_', $search)), $branch, 0, 10);
  while ($r = db_fetch_object($result)) {
    $matches[] = $r->title;
  }
  print drupal_json(array($search, $matches));
}

/**
 * Page callback for api/[branch]: displays the main documentation page.
 *
 * @param $branch
 *   Branch object giving the branch to display documentation for.
 */
function api_page_branch($branch) {
  $result = db_query("SELECT documentation FROM {api_documentation} WHERE branch_id = %d AND object_type = 'mainpage'", $branch->branch_id);
  if ($docs = db_fetch_object($result)) {
    return api_link_documentation($docs->documentation, $branch);
  }
  else {
    return theme('api_branch_default_page', $branch);
  }
}

/**
 * Page callback for displaying documentation for an object.
 */
function api_page_listing($branch, $object_type, $switch_links = TRUE) {
  $result = pager_query("SELECT * FROM {api_documentation} WHERE branch_id = %d AND object_type = '%s' AND (class_did = 0 OR object_type = 'group') ORDER BY title", 50, 0, NULL, $branch->branch_id, $object_type);
  return api_render_listing($result) . theme('pager', NULL, 50, 0) . ($switch_links ? api_switch_project($branch, '/' . $object_type . 's') : '');
}

/**
 * Returns links to switch projects.
 */
function api_switch_project($current_branch, $url = '') {
  $links = array();
  foreach (api_get_branches() as $branch) {
    if ($branch->status && $branch->project !== $current_branch->project && !isset($links[$branch->project])) {
      $links[$branch->project] = array(
        'title' => $branch->title,
        'href' => 'api/' . $branch->project . $url,
      );
    }
  }
  if (count($links) > 0) {
    return '<p class="api-switch"><strong>' . t('Other projects:') . '</strong> ' . theme('links', $links) . '</p>';
  }
}

/**
 * Renders an overview of documentation objects in a table.
 *
 * @param $result
 *   A database query result object.
 * @param $empty_message
 *   An optional string to display instead of an empty table.
 *
 * @return
 *   Rendered HTML for the listing.
 */
function api_render_listing($result, $empty_message = NULL) {
  $tables = api_render_members(api_query_list($result), TRUE);
  if (count($tables) > 0) {
    return array_shift($tables);
  }
  return ($empty_message == NULL ? '' : '<p><em>'. $empty_message .'</em></p>' );
}

/**
 * Page callback for path api/function_dump/[branch].
 *
 * Lists all functions in the branch in text format, for use in IDEs.
 */
function api_page_function_dump($branch_name) {
  $result = db_query("SELECT d.title, d.summary, f.signature FROM {api_documentation} d INNER JOIN {api_function} f ON d.did = f.did INNER JOIN {api_branch} b ON d.branch_id = b.branch_id  WHERE b.branch_name = '%s' AND d.object_type = 'function'", $branch_name);
  while ($object = db_fetch_object($result)) {
    print($object->signature);
    print(' ### '. $object->summary ."\n");
  }
}

/**
 * Sets the page title and breadcrumb for an object display page.
 */
function api_object_title_and_breadcrumb($branch, $object) {
  drupal_set_title($object->object_name);
  $breadcrumb = array(
    l(t('Home'), ''),
    l(t('API reference'), 'api/' . $branch->project),
  );
  if ($object->object_type !== 'file') {
    $breadcrumb[] = l(basename($object->file_name), api_url($object, TRUE));
  }
  if (!empty($object->class_did)) {
    $branches = api_get_branches();
    $class = api_object_load((int) $object->class_did, $branches[$object->branch_id], array('interface', 'class'), $object->file_name);
    $breadcrumb[] = l($class->object_name, api_url($class));
  }
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Page callback that displays documentation for a function.
 */
function api_page_function($branch, $function) {
  api_object_title_and_breadcrumb($branch, $function);

  $branches = api_get_branches();
  $last_signature = '';
  $signatures = array();
  $n = 0;
  $result = db_query("SELECT d.branch_id, d.file_name, d.object_type, d.object_name, f.signature, d.class_did FROM {api_documentation} d INNER JOIN {api_function} f ON f.did = d.did INNER JOIN {api_branch} b ON d.branch_id = b.branch_id WHERE d.object_type = 'function' AND d.title = '%s' AND d.class_did = %d ORDER BY b.weight", $function->title, $function->class_did);
  while ($signature = db_fetch_object($result)) {
    if ($signature->signature == $last_signature) {
      // Collapse unchanged signatures to one line.
      $signature_info[$n - 1]['max object'] = $signature;
      $signature_info[$n - 1]['active'] = $signature_info[$n - 1]['active'] || $signature->branch_id == $function->branch_id;
    }
    else {
      $tokens = token_get_all('<?php '. $signature->signature);
      // Remove <?php
      array_shift($tokens);
      // Get function name
      $name = '';
      while ($tokens[1] !== '(') {
        if (is_array($tokens[0])) {
          $name .= $tokens[0][1];
        }
        else {
          $name .= $tokens[0];
        }
        array_shift($tokens);
      }
      if ($signature->class_did !== '0') {
        $class = api_object_load((int) $signature->class_did, $branches[$signature->branch_id], array('interface', 'class'), $signature->file_name);
        $name .= l($class->object_name, api_url($class)) . '::';
      }
      $name .= $tokens[0][1];
      $signature_info[$n] = array(
        'object' => $signature,
        'max object' => $signature, // Keep track of the most-recent branch
        'active' => $signature->branch_id === $function->branch_id,
        'arguments' => array(),
        'other' => array(),
      );
      $start = TRUE;
      $d = 0;
      $a = -1;
      $signature_info[$n]['other'][$a] = '';
      foreach ($tokens as $token) {
        $d += in_array($token, array('(', '{', '[')) - in_array($token, array(')', '}', ']'));
        if ($d == 1 && $start && is_array($token) && $token[0] == T_VARIABLE) {
          // New argument
          $a += 1;
          $signature_info[$n]['arguments'][$a] = $token[1];
          $signature_info[$n]['other'][$a] = '';
          $start = FALSE;
        }
        elseif ($d >= 1 && is_array($token)) {
          $signature_info[$n]['other'][$a] .= $token[1];
        }
        elseif ($d >= 1) {
          $signature_info[$n]['other'][$a] .= $token;
          // Start looking for a new argument if we see a comma.
          $start = $start || ($d == 1 && $token == ',');
        }
      }
      $last_signature = $signature->signature;
      $n += 1;
    }
  }
  foreach ($signature_info as $n => $info) {
    $new = array();
    if (isset($signature_info[$n - 1])) {
      $new = array_diff($info['arguments'], $signature_info[$n - 1]['arguments']);
    }
    $old = array();
    if (isset($signature_info[$n + 1])) {
      $old = array_diff($info['arguments'], $signature_info[$n + 1]['arguments']);
    }
    $branch_label = $branches[$info['object']->branch_id]->branch_name;
    if ($info['object']->branch_id !== $info['max object']->branch_id) {
      $branch_label .= ' – '. $branches[$info['max object']->branch_id]->branch_name;
    }
    $signature = $name . $info['other'][-1];
    foreach ($signature_info[$n]['arguments'] as $key => $argument) {
      if (in_array($argument, $old)) {
        $signature .= '<del>'. $argument .'</del>';
      }
      elseif (in_array($argument, $new)) {
        $signature .= '<ins>'. $argument .'</ins>';
      }
      else {
        $signature .= $argument;
      }
      $signature .= $info['other'][$key];
    }
    $signature .= ')';
    $signatures[$branch_label] = array(
      'signature' => $signature,
      'url' => api_url($info['max object']),
      'active' => $info['active'],
      'status' => $branches[$info['max object']->branch_id]->status,
    );
  }

  $documentation = api_link_documentation($function->documentation, $branch);
  $parameters = api_link_documentation($function->parameters, $branch);
  $return = api_link_documentation($function->return_value, $branch);
  $see = api_link_documentation($function->see, $branch);
  $code = api_link_code($function->code, $branch);
  $related_topics = api_related_topics($function->did, $branch);

  $call_count = db_result(db_query("SELECT count(*) FROM {api_reference_storage} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type = 'function' WHERE r.to_did = %d", $function->did));
  $call = '';
  if ($call_count > 0) {
    $result = db_query("SELECT d.branch_id, d.object_name, d.title, d.summary, d.file_name, d.object_type FROM {api_reference_storage} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type = 'function' WHERE r.to_did = %d ORDER BY d.title", $function->did);
    $call_functions = array();
    while ($object = db_fetch_object($result)) {
      $call_functions[] = array(
        'function' => l($object->title, api_url($object)),
        'file' => api_file_link($object),
        'description' => api_link_documentation($object->summary, $branch),
      );
    }
    $call_title = format_plural($call_count, '1 function calls @name()', '@count functions call @name()', array('@name' => $function->title));
    $call = theme('api_expandable', '<h3>'. api_show_l('▸ '. $call_title) .'</h3>', '<h3>'. api_hide_l('▾ '. $call_title) .'</h3>'. theme('api_functions', $call_functions));
  }

  $output = theme('api_function_page', $branch, $function, $signatures, $documentation, $parameters, $return, $related_topics, $call, $code, $see);
  $output .= _api_add_comments($function);
  return $output;
}

/**
 * Page callback that displays documentation for a constant.
 */
function api_page_constant($branch, $constant) {
  api_object_title_and_breadcrumb($branch, $constant);

  $documentation = api_link_documentation($constant->documentation, $branch);
  $code = api_link_code($constant->code, $branch);
  $related_topics = api_related_topics($constant->did, $branch);
  $see = api_link_documentation($function->see, $branch);

  $output = theme('api_constant_page', $branch, $constant, $documentation, $code, $related_topics, $see);
  $output .= _api_add_comments($constant);
  return $output;
}

/**
 * Page callback that displays documentation for a global.
 */
function api_page_global($branch, $global) {
  api_object_title_and_breadcrumb($branch, $global);

  $documentation = api_link_documentation($global->documentation, $branch);
  $related_topics = api_related_topics($global->did, $branch);
  $code = api_link_code($global->code, $branch);
  $see = api_link_documentation($global->see, $branch);

  $output = theme('api_global_page', $branch, $global, $documentation, $code, $related_topics, $see);
  $output .= _api_add_comments($global);
  return $output;
}

/**
 * Page callback that displays documentation for a global.
 */
function api_page_property($branch, $property) {
  api_object_title_and_breadcrumb($branch, $property);

  $documentation = api_link_documentation($property->documentation, $branch);
  $related_topics = api_related_topics($property->did, $branch);
  $code = api_link_code($property->code, $branch);
  $see = api_link_documentation($property->see, $branch);

  $output = theme('api_global_page', $branch, $property, $documentation, $code, $related_topics, $see);
  $output .= _api_add_comments($property);
  return $output;
}

/**
 * Page callback that displays documentation for a class.
 */
function api_page_class($branch, $class) {
  api_object_title_and_breadcrumb($branch, $class);

  $documentation = api_link_documentation($class->documentation, $branch);
  $related_topics = api_related_topics($class->did, $branch);
  $code = api_link_code($class->code, $branch);
  $see = api_link_documentation($class->see, $branch);

  // builds up class hierarchy
  $class = api_class_children($class);
  $parents = api_class_parents($class);
  if ((count($class->children) > 0) || (count($parents->children) > 0) || (count($class->interface) > 0)) {
    $hierarchy = theme('item_list', array(api_render_class_hierarchy($parents, $class->did)));
  }

  $list = api_render_members(api_inherited($parents, $class->did, array('constant', 'property', 'function')));
  $output = theme('api_class_page', $branch, $class, $documentation, $hierarchy, $list['constant'], $list['property'], $list['function'], $code, $related_topics, $see);
  $output .= _api_add_comments($class);

  return $output;
}

/**
 * Page callback that displays documentation for a file.
 */
function api_page_file($branch, $file) {
  api_object_title_and_breadcrumb($branch, $file);

  $documentation = api_link_documentation($file->documentation, $branch);
  $see = api_link_documentation($file->see, $branch);
  $related_topics = api_related_topics($file->did, $branch);

  $result = db_query("SELECT branch_id, title, object_name, summary, object_type, file_name FROM {api_documentation} WHERE file_name = '%s' AND branch_id = %d AND object_type IN ('constant', 'global', 'function', 'interface', 'class') AND class_did = 0 ORDER BY title", $file->object_name, $file->branch_id);
  $list = api_render_members(api_query_list($result));

  $output = theme('api_file_page', $file, $documentation, $list['interface'], $list['class'], $list['constant'], $list['global'], $list['function'], $see, $related_topics);
  $output .= _api_add_comments($file);
  return $output;
}

/**
 * Renders comments for a documentation object.
 *
 * @param $documentation_object
 *   Object to render comments for.
 *
 * @return
 *   Rendered comments to display with the object.
 */
function _api_add_comments($documentation_object) {
  $output = '';

  if (module_exists('comment') && user_access('access comments') && variable_get('comment_api', COMMENT_NODE_READ_WRITE) != COMMENT_NODE_DISABLED) {
    $output .= comment_render(node_load($documentation_object->did));
    if (user_access('post comments')) {
      $output .= comment_form_box(array('nid' => $documentation_object->did), t('Post new comment'));
    }
    elseif (array_key_exists(DRUPAL_AUTHENTICATED_RID, user_roles(TRUE, 'post comments'))) {
      // If authenticated users can post comments.
      $options = array(
        'query' => drupal_get_destination() . urlencode('#comment-form'),
      );
      if (variable_get('user_register', 1)) {
        // Users can register themselves.
        $output .= t('<a href="@login">Login</a> or <a href="@register">register</a> to post comments', array('@login' => url('user/login', $options), '@register' => url('user/register', $options)));
      }
      else {
        // Only admins can add new users, no public registration.
        $output .= t('<a href="@login">Login</a> to post comments', array('@login' => url('user/login', $options)));
      }
    }
  }

  return $output;
}

/**
 * Page callback that displays source code for a file.
 */
function api_page_file_source($branch, $file) {
  api_object_title_and_breadcrumb($branch, $file);

  return api_link_code($file->code, $branch);
}

/**
 * Page callback that displays documentation for a group.
 */
function api_page_group($branch, $group) {
  api_object_title_and_breadcrumb($branch, $group);

  $documentation = api_link_documentation($group->documentation, $branch);
  $see = api_link_documentation($group->see, $branch);

  $result = db_query("SELECT d.branch_id, d.object_name, d.title, d.summary, d.file_name, d.object_type FROM {api_reference_storage} r INNER JOIN {api_documentation} d ON r.from_did = d.did AND d.object_type IN ('constant', 'global', 'function', 'file') WHERE r.to_did = %d ORDER BY d.object_name", $group->did);
  $list = api_render_members(api_query_list($result), TRUE);

  $output = theme('api_group_page', $branch, $group, $documentation, $list['constant'], $list['global'], $list['function'], $list['file'], $see);
  $output .= _api_add_comments($group);
  return $output;
}

/**
 * Lists the topics (groups) that contain the documentation object.
 *
 * @param $did
 *   ID of the documentation object to find topics for.
 * @param $branch
 *   Branch object to find topics in.
 *
 * @return
 *   List of related topics, rendered as HTML.
 */
function api_related_topics($did, $branch) {
  $header = array(
    t('Name'),
    t('Description'),
  );
  $topics = array();
  $result = db_query("SELECT d.branch_id, d.object_name, d.file_name, d.object_type, d.title, d.summary FROM {api_reference_storage} r INNER JOIN {api_documentation} d ON r.to_did = d.did AND d.object_type = 'group' WHERE r.from_did = %d", $did);
  while ($group = db_fetch_object($result)) {
    $topics[l($group->title, api_url($group))] = api_link_documentation($group->summary, $branch);
  }
  if (count($topics) > 0) {
    return theme('api_related_topics', $topics);
  }
  return '';
}

/**
 * Returns a link to the file a documentation object is in.
 *
 * @param $object
 *   Documentation object.
 *
 * @return
 *   Formatted link to the file the object is in.
 */
function api_file_link($object) {
  return dirname($object->file_name) .'/'. l(basename($object->file_name), api_url($object, TRUE));
}

/**
 * Implementation of hook_cron().
 */
function api_cron() {
  include_once './'. drupal_get_path('module', 'api') .'/parser.inc';
  api_update_all_branches();
}

/**
 * Turns function names into links in code.
 *
 * @param $code
 *   PHP code to scan for function names.
 * @param $branch
 *   Branch to make the links in.
 *
 * @return
 *   Code with function names formatted as links.
 */
function api_link_code($code, $branch) {
  return _api_link_documentation($code, $branch, array('code function'));
}

/**
 * Turns function names into links in documentation.
 *
 * @param $documentation
 *   Documentation to scan for function names.
 * @param $branch
 *   Branch to make the links in.
 *
 * @return
 *   Documentation with function names formatted as links.
 */
function api_link_documentation($documentation, $branch) {
  return _filter_url(api_filter_documentation($documentation, $branch), NULL);
}

/**
 * Turns function names into links for filter.
 *
 * This is the process callback for the API filter supplied by api_filter().
 * It turns function names into links on output, using the currently active
 * branch.
 *
 * @param $text
 *   Text to filter.
 * @param $branch
 *   Branch object to use for links.
 *
 * @return
 *   Text with function names turned into links.
 */
function api_filter_documentation($text, $branch) {
  // Remove escaping from \@.
  return preg_replace('!\\\@!', '@', _api_link_documentation($text, $branch, array('tags', 'link', 'function', 'file')));
}

/**
 * Recursive internal callback for turning function names into links in code.
 *
 * @param $documentation
 *   PHP code to scan for function names.
 * @param $branch
 *   Branch to make the links in.
 * @stages
 *   Array of stages to process.
 *
 * @return
 *   Code with function names formatted as links.
 *
 * @see api_link_code()
 */
function _api_link_documentation($documentation, $branch, $stages = array()) {
  $patterns = array(
    // Find HTML tags, which will not be filtered.
    'tags' => '/(<[^>]+?'.'>)/',

    // Find @link
    'link' => '/' . API_RE_TAG_START . 'link\s+(.*)\s+' . API_RE_TAG_START . 'endlink/',

    // Find function names, which are preceded by white space and followed by
    // '('.
    'function' => '!(?<=^|\s)([a-zA-Z0-9_:]+)\(!',

    // Find function names in marked-up code.
    'code function' => '!<span class="php-function-or-constant">([a-zA-Z0-9_]+)</span>!',

    // Find file names, which are an arbitrary number of strings joined with
    // '.'
    'file' => '%(?<=^|\s)'. API_RE_FILENAME .'(?=$|\s|[.,:;?!])%e',
  );
  $stage = array_shift($stages);

  $callback_match = 'api_link_name';
  $prepend = '';
  $append = '';

  switch ($stage) {
    case 'tags':
      $callback_match = NULL;
      break;

    case 'link':
      $callback_match = 'api_link_link';
      break;

    case 'function':
      $append = '(';
      break;

    case 'code function':
      $prepend = '<span class="php-function-or-constant">';
      $append = '</span>';
      break;
  }

  if (count($stages) > 0) {
    $callback = '_api_link_documentation';
  }
  else {
    $callback = NULL;
  }

  return api_split($patterns[$stage], $documentation, $callback_match, array($branch, $prepend, $append), $callback, array($branch, $stages));
}

/**
 * Splits a string using a regular expression and processes the text using
 * callbacks.
 *
 * @param $pattern
 *   The regular expression to match for splitting.
 * @param $subject
 *   The string to process.
 * @param $callback_match
 *   Function name to be called for text which matches $pattern. The first
 *   argument will be the parenthesized expression in the pattern. Should
 *   return a string. NULL to pass the text through unchanged.
 * @param $callback_match_arguments
 *   An array of additional parameters for $callback_match.
 * @param $callback
 *   Function name to be called for text which does not match $pattern. The
 *   first argument will be the text. Should return a string. NULL to pass the
 *   text through unchanged.
 * @param $callback_arguments
 *   An array of additional parameters for $callback.
 *
 * @return
 *   The original string, with both matched and unmatched portions filtered by
 *   the appropriate callbacks.
 */
function api_split($pattern, $subject, $callback_match = NULL, $callback_match_arguments = array(), $callback = NULL, $callback_arguments = array()) {
  $return = '';
  $matched = FALSE;
  foreach (preg_split($pattern, $subject, -1, PREG_SPLIT_DELIM_CAPTURE) as $part) {
    if ($matched) {
      if (is_null($callback_match)) {
        $return .= $part;
      }
      else {
        $return .= call_user_func_array($callback_match, array_merge(array($part), $callback_match_arguments));
      }
    }
    else {
      if (is_null($callback)) {
        $return .= $part;
      }
      else {
        $return .= call_user_func_array($callback, array_merge(array($part), $callback_arguments));
      }
    }
    $matched = !$matched;
  }
  return $return;
}

/**
 * Links an object name to its documentation.
 *
 * @param $name
 *   Object name to link to.
 * @param $branch
 *   Branch object indicating which branch to make the link in.
 * @param $prepend
 *   Text to prepend on the link.
 * @param $append
 *   Text to append on the link.
 * @param $text
 *   Link text. If omitted, uses $name.
 *
 * @return
 *   The text as a link to the object page.
 */
function api_link_name($name, $branch, $prepend = '', $append = '', $text = NULL, $is_link = FALSE) {
  static $local_objects, $php_functions;

  if (is_null($local_objects)) {
    $result = db_query("SELECT ad.did, ad.branch_id, ad.object_name, ad.title, ad.object_type, ad.summary, ad.file_name, ad.class_did, (ao.did IS NULL OR ao.root_did = ao.did) is_root FROM {api_documentation} ad LEFT JOIN {api_overrides} ao ON ao.did = ad.did WHERE ad.branch_id = %d", $branch->branch_id);
    $local_objects = array(
      'function' => array(),
      'file' => array(),
      'group' => array(),
      'constant' => array(),
      'global' => array(),
      'class' => array(),
      'interface' => array(),
    );
    while ($object = db_fetch_object($result)) {
      switch ($object->object_type) {
        case 'file':
          $local_objects[$object->object_type][basename($object->object_name)] = $object;
          break;

        case 'group':
          $local_objects[$object->object_type][$object->object_name] = $object;
          break;

        default:
          if ($object->is_root) {
            $local_objects[$object->object_type][$object->title] = $object;
          }
          $local_objects[$object->object_type][$object->object_name] = $object;
      }
    }
  }

  if (is_null($php_functions)) {
    $result = db_query("SELECT d.object_name, d.summary FROM {api_documentation} d INNER JOIN {api_branch} b ON b.branch_id = d.branch_id AND b.type = 'php' WHERE d.object_type = 'function'");
    $php_functions = array();
    while ($function = db_fetch_object($result)) {
      $php_functions[$function->object_name] = $function->summary;
    }
  }

  if (is_null($text)) {
    $text = $name;
  }

  if ($is_link && array_key_exists($name, $local_objects['group'])) {
    return $prepend . l($text, api_url($local_objects['group'][$name])) . $append;
  }
  elseif (array_key_exists($name, $local_objects['function'])) {
    return $prepend . l($text, api_url($local_objects['function'][$name]), array('attributes' => array('title' => $local_objects['function'][$name]->summary, 'class' => 'local'))) . $append;
  }
  elseif (array_key_exists($name, $local_objects['class'])) {
    return $prepend . l($text, api_url($local_objects['class'][$name]), array('attributes' => array('title' => $local_objects['class'][$name]->summary, 'class' => 'local'))) . $append;
  }
  elseif (array_key_exists($name, $local_objects['interface'])) {
    return $prepend . l($text, api_url($local_objects['interface'][$name]), array('attributes' => array('title' => $local_objects['interface'][$name]->summary, 'class' => 'local'))) . $append;
  }
  elseif (array_key_exists($name, $local_objects['file'])) {
    return $prepend . l($text, api_url($local_objects['file'][$name]), array('attributes' => array('title' => $local_objects['file'][$name]->summary, 'class' => 'local'))) . $append;
  }
  elseif (array_key_exists($name, $local_objects['constant'])) {
    return $prepend . l($text, api_url($local_objects['constant'][$name]), array('attributes' => array('title' => $local_objects['constant'][$name]->summary, 'class' => 'local'))) . $append;
  }
  elseif (array_key_exists($name, $local_objects['global'])) {
    return $prepend . l($text, api_url($local_objects['global'][$name]), array('attributes' => array('title' => $local_objects['global'][$name]->summary, 'class' => 'local'))) . $append;
  }
  elseif (array_key_exists($name, $php_functions)) {
    $link = strtr(variable_get('api_php_funcpath', 'http://php.net/!function'), array('!function' => $name));
    return $prepend . l($text, $link, array('attributes' => array('title' => $php_functions[$name], 'class' => 'php-manual'))) . $append;
  }
  else {
    return $prepend . $text . $append;
  }
}

/**
 * Turns text into a link, using the first word as the object name.
 *
 * @param $name
 *   Text to link.
 * @param $branch
 *   Branch object indicating which branch to make the link in.
 * @param $prepend
 *   Text to prepend on the link.
 * @param $append
 *   Text to append on the link.
 *
 * @return
 *   The text as a link.
 */
function api_link_link($name, $branch, $prepend = '', $append = '') {
  $words = preg_split('/\s+/', $name);
  $name = array_shift($words);
  return api_link_name($name, $branch, $prepend, $append, implode(' ', $words), TRUE);
}

/**
 * Returns class parents and interfaces (recursive).
 *
 * Get all interfaces first so we can return the recursive call after if needed
 *
 * @param $class
 *   The class to look for parents.
 * @param $recursive
 *   Boolean. toggles the recursivity flag.
 *
 * @return
 *   Object class with
 *     children = array(object class)
 *     interfaces = array(object interface).
 */
function api_class_parents($class, $recursive = TRUE) {
  $class->interfaces = array();
  $result = db_query("SELECT DISTINCT d.did as did, d.branch_id as branch_id, d.title as title, d.object_type as object_type, d.file_name as file_name, d.object_name as object_name, d.summary as summary FROM {api_reference_storage} rs INNER JOIN {api_documentation} d ON d.did = rs.to_did WHERE rs.from_did = %d AND rs.branch_id = %d AND rs.object_type IN ('interface'" . ($recursive ? ", 'class'" : '') . ") ORDER BY d.object_type DESC", $class->did, $class->branch_id);
  while ($object = db_fetch_object($result)) {
    if ($object->object_type === 'interface') {
      $class->interfaces[] = $object;
    }
    else {
      $object->children[] = $class;
      return api_class_parents($object);
    }
  }
  return $class;
}

/**
 * Returns class children with interfaces (recursive).
 *
 * @param $class
 *   The class to look for children.
 *
 * @return
 *   Object class with
 *     children = array(object class)
 *     interfaces = array(object interface).
 */
function api_class_children($class) {
  $class->children = array();
  $result = db_query("SELECT DISTINCT d.did as did, d.branch_id as branch_id, d.title as title, d.object_type as object_type, d.file_name as file_name, d.object_name as object_name FROM {api_documentation} d INNER JOIN {api_reference_storage} rs ON d.did = rs.from_did WHERE rs.to_did = %d AND d.branch_id = %d AND d.object_type = 'class'", $class->did, $class->branch_id);
  while ($object = db_fetch_object($result)) {
    // found a child : gather its interfaces, builds its possible children list, and adds it to the children list
    $class->children[] = api_class_children(api_class_parents($object, FALSE));
  }
  return $class;
}

/**
 * Get list of inherited members (recursive).
 *
 * @param $class
 *   Class object with hierarchy as returned by api_class_parents().
 * @param $last_did
 *   Class did to compare to stop the recursive call.
 * @param $types
 *   Object types to gather. Can be a string of array of strings.
 *   Allowed types : constant, property, function, interface.
 * @param $members
 *   Members lists to merge.
 *
 * @return
 *   Members list : array(type => array(title => object)).
 */
function api_inherited($class, $last_did, $types = 'function', $members = array()) {
  foreach (api_members($class, $types) as $objects) {
    foreach ($objects as $object) {
      if ($class->did === $last_did) {
        if (isset($members[$object->object_type][$object->title])) {
          $object->link_overrides = l(strip_tags($members[$object->object_type][$object->title]->link_inherited), api_url($members[$object->object_type][$object->title]));
        }
      }
      else {
        $object->link_inherited = l($class->title, api_url($class));
      }
      
      $members[$object->object_type][$object->title] = $object;
    }
  }

  // if its the last child, sort members, else we need another call
  if ($class->did === $last_did) {
    foreach ($members as $type => &$objects) {
      ksort($objects);
    }
  }
  else {
    $members = api_inherited(array_shift($class->children), $last_did, $types, $members);
  }
  return $members;
}

/**
 * Get list of class members.
 *
 * @param $class
 *   Class object.
 * @param $types
 *   Object types to gather. Can be a string of array of strings.
 *   Allowed types : constant, property, function, interface.
 *
 * @return
 *   Members list : array(type => array(title => object)).
 */
function api_members($class, $types = 'function') {
  if (!is_array($types)) {
    $types = array($types);
  }

  $args = array_merge(array($class->did, $class->branch_id), $types);
  $result = db_query("SELECT branch_id, title, object_name, summary, object_type, file_name FROM {api_documentation} WHERE class_did = %d AND branch_id = %d AND object_type IN (" . db_placeholders($types, 'text') . ") ORDER BY title", $args);
  return api_query_list($result);
}

/**
 * Sorts query result by object type to use with api_render_members().
 *
 * @param $result
 *   A database query result object.
 *
 * @return
 *   Members list : array(type => array(title => object)).
 */
function api_query_list($result) {
  $items = array();
  while ($object = db_fetch_object($result)) {
    $items[$object->object_type][$object->title] = $object;
  }
  return $items;
}

/**
 * Render class hierarchy (recursive).
 *
 * @param $object
 *   Object hierarchy.
 * @param $selected_did
 *   Selected class did.
 *
 * @return
 *   Themed hierarchy in html unordered list.
 */
function api_render_class_hierarchy($object, $selected_did = '') {
  if (count($object->interfaces) > 0) {
    foreach ($object->interfaces as $interface) {
      $interfaces[$interface->title] = l($interface->title, api_url($interface));
    }
    $interface_text = ' implements ' . implode(', ', $interfaces);
  }

  foreach ($object->children as $child) {
    $children[] .= api_render_class_hierarchy($child, $selected_did);
  }
  $object_text = $object->did === $selected_did ? '<strong>' . $object->title . '</strong>' : l($object->title, api_url($object));
  return $object_text . $interface_text . theme('item_list', $children);
}

/**
 * Renders members lists as html tables.
 *
 * @param $list
 *   Members list : array(type => array(title => object)).
 * @param $link_file
 *   Boolean : toggles the display of the file link column.
 *
 * @return
 *   List of themed html tables.
 */
function api_render_members($list, $link_file = FALSE) {
  $branches = api_get_branches();
  $header = array(t('Name'));
  if ($link_file) {
    $header[] = t('Location');
  }
  $header[] = t('Description');

  $return = array();
  foreach ($list as $type => $objects) {
    $rows = array();
    foreach ($objects as $object) {
      $row = array(l($object->title, api_url($object)));
      if ($link_file) {
        $row[] = '<small>' . api_file_link($object) . '</small>';
      }
      $summary = api_link_documentation($object->summary, $branches[$object->branch_id]);
      if (isset($object->link_overrides)) {
        $source = ' <em class="api-inheritance-source">' . t('Overrides !link', array('!link' => $object->link_overrides));
      }
      elseif (isset($object->link_inherited)) {
        $source = ' <em class="api-inheritance-source">' . t('Inherited from !link', array('!link' => $object->link_inherited)) . '</em>';
      }
      else {
        $source = '';
      }

      $row[] = $summary . $source;
      $rows[] = $row;
    }
    $return[$type] = theme('table', $header, $rows);
  }
  return $return;
}
